<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="services.db.mapper.DataMapper">
    <insert id="insertConsumers">
        INSERT INTO ${tableName}(ADDR,APT,BUY_AUTO_PARTS,BUY_GARDENING,BUY_HOME_GARD,CC_USER,CITY,CREDIT_LINES,CREDIT_RANGE_NEW,CREDIT_RATING,DOB_DAY,DOB_MON,DOB_YR,DONR_CHARITABLE,DONR_MAIL_ORD,DONR_POL,DONR_POL_CONS,DONR_POL_LIB,DONR_RELIG,DONR_VETS,DWELL_TYP,EDUC,ETHNIC_ASSIM,ETHNIC_CODE,ETHNIC_CONF,ETHNIC_GRP,ETHNIC_HISP_CNTRY,ETHNIC_LANG,ETHNIC_RELIG,FIPS_CTY,FN,GENDER,GENS,HH_INCOME,HH_MARITAL_STAT,HH_SIZE,HOME_OWNR,HOME_OWNR_SRC,INF_HH_RANK,INT_HOB_SWEEPS,INT_TRAV_CASINO,INT_TRAV_GENL,LIFE_DIY,LIFE_HOME,LN,LOR,MI,NAME_PRE,NET_WORTH,NUM_ADULTS,NUM_KIDS,PHONE,phoneType,PRES_KIDS,PROP_TYPE,ST,TIME_ZN,VET_IN_HH,ZIP,ZIP4,AREA_CODE,COUNTY,ZIP_CODE,ST_CODE,DOB_DATE,age) VALUES
        <foreach item="item" index="index" collection="consumerList"
                 open="" separator="," close="">
            (#{item.ADDR},#{item.APT},#{item.BUY_AUTO_PARTS},#{item.BUY_GARDENING},#{item.BUY_HOME_GARD},#{item.CC_USER},#{item.CITY},#{item.CREDIT_LINES},#{item.CREDIT_RANGE_NEW},#{item.CREDIT_RATING},#{item.DOB_DAY},#{item.DOB_MON},#{item.DOB_YR},#{item.DONR_CHARITABLE},#{item.DONR_MAIL_ORD},#{item.DONR_POL},#{item.DONR_POL_CONS},#{item.DONR_POL_LIB},#{item.DONR_RELIG},#{item.DONR_VETS},#{item.DWELL_TYP},#{item.EDUC},#{item.ETHNIC_ASSIM},#{item.ETHNIC_CODE},#{item.ETHNIC_CONF},#{item.ETHNIC_GRP},#{item.ETHNIC_HISP_CNTRY},#{item.ETHNIC_LANG},#{item.ETHNIC_RELIG},#{item.FIPS_CTY},#{item.FN},#{item.GENDER},#{item.GENS},#{item.HH_INCOME},#{item.HH_MARITAL_STAT},#{item.HH_SIZE},#{item.HOME_OWNR},#{item.HOME_OWNR_SRC},#{item.INF_HH_RANK},#{item.INT_HOB_SWEEPS},#{item.INT_TRAV_CASINO},#{item.INT_TRAV_GENL},#{item.LIFE_DIY},#{item.LIFE_HOME},#{item.LN},#{item.LOR},#{item.MI},#{item.NAME_PRE},#{item.NET_WORTH},#{item.NUM_ADULTS},#{item.NUM_KIDS},#{item.PHONE},#{item.phoneType},#{item.PRES_KIDS},#{item.PROP_TYPE},#{item.ST},#{item.TIME_ZN},#{item.VET_IN_HH},#{item.ZIP},#{item.ZIP4},#{item.AREA_CODE},#{item.COUNTY},#{item.ZIP_CODE},#{item.ST_CODE},#{item.DOB_DATE},#{item.age})
        </foreach>
    </insert>

    <insert id="insertConsumersWithIds">
        INSERT INTO ${tableName}(id,ADDR,APT,BUY_AUTO_PARTS,BUY_GARDENING,BUY_HOME_GARD,CC_USER,CITY,CREDIT_LINES,CREDIT_RANGE_NEW,CREDIT_RATING,DOB_DAY,DOB_MON,DOB_YR,DONR_CHARITABLE,DONR_MAIL_ORD,DONR_POL,DONR_POL_CONS,DONR_POL_LIB,DONR_RELIG,DONR_VETS,DWELL_TYP,EDUC,ETHNIC_ASSIM,ETHNIC_CODE,ETHNIC_CONF,ETHNIC_GRP,ETHNIC_HISP_CNTRY,ETHNIC_LANG,ETHNIC_RELIG,FIPS_CTY,FN,GENDER,GENS,HH_INCOME,HH_MARITAL_STAT,HH_SIZE,HOME_OWNR,HOME_OWNR_SRC,INF_HH_RANK,INT_HOB_SWEEPS,INT_TRAV_CASINO,INT_TRAV_GENL,LIFE_DIY,LIFE_HOME,LN,LOR,MI,NAME_PRE,NET_WORTH,NUM_ADULTS,NUM_KIDS,PHONE,phoneType,PRES_KIDS,PROP_TYPE,ST,TIME_ZN,VET_IN_HH,ZIP,ZIP4,AREA_CODE,COUNTY,ZIP_CODE,ST_CODE,DOB_DATE,age) VALUES
        <foreach item="item" index="index" collection="consumerList"
                 open="" separator="," close="">
            (#{item.id},#{item.ADDR},#{item.APT},#{item.BUY_AUTO_PARTS},#{item.BUY_GARDENING},#{item.BUY_HOME_GARD},#{item.CC_USER},#{item.CITY},#{item.CREDIT_LINES},#{item.CREDIT_RANGE_NEW},#{item.CREDIT_RATING},#{item.DOB_DAY},#{item.DOB_MON},#{item.DOB_YR},#{item.DONR_CHARITABLE},#{item.DONR_MAIL_ORD},#{item.DONR_POL},#{item.DONR_POL_CONS},#{item.DONR_POL_LIB},#{item.DONR_RELIG},#{item.DONR_VETS},#{item.DWELL_TYP},#{item.EDUC},#{item.ETHNIC_ASSIM},#{item.ETHNIC_CODE},#{item.ETHNIC_CONF},#{item.ETHNIC_GRP},#{item.ETHNIC_HISP_CNTRY},#{item.ETHNIC_LANG},#{item.ETHNIC_RELIG},#{item.FIPS_CTY},#{item.FN},#{item.GENDER},#{item.GENS},#{item.HH_INCOME},#{item.HH_MARITAL_STAT},#{item.HH_SIZE},#{item.HOME_OWNR},#{item.HOME_OWNR_SRC},#{item.INF_HH_RANK},#{item.INT_HOB_SWEEPS},#{item.INT_TRAV_CASINO},#{item.INT_TRAV_GENL},#{item.LIFE_DIY},#{item.LIFE_HOME},#{item.LN},#{item.LOR},#{item.MI},#{item.NAME_PRE},#{item.NET_WORTH},#{item.NUM_ADULTS},#{item.NUM_KIDS},#{item.PHONE},#{item.phoneType},#{item.PRES_KIDS},#{item.PROP_TYPE},#{item.ST},#{item.TIME_ZN},#{item.VET_IN_HH},#{item.ZIP},#{item.ZIP4},#{item.AREA_CODE},#{item.COUNTY},#{item.ZIP_CODE},#{item.ST_CODE},#{item.DOB_DATE},#{item.age})
        </foreach>
    </insert>

    <insert id="insertConsumers2">
        INSERT INTO ${tableName}(PERSONFIRSTNAME,carrier_name,PERSONMIDDLEINITIAL,PERSONLASTNAME,PRIMARYADDRESS,SECONDARYADDRESS,STATE,ST_CODE,ZIPCODE,ZIP_4,COUNTYCODE,COUNTYNAME,CITYNAME,DWELLINGTYPE,AREACODE,PHONE,PHONETYPE,DNC,ESTIMATEDINCOMECODE,HOMEOWNERPROBABILITYMODEL,LENGTHOFRESIDENCE,NUMBEROFPERSONSINLIVINGUNIT,PRESENCEOFCHILDREN,NUMBEROFCHILDREN,PERSONGENDER,PERSONDATEOFBIRTHDATE,PERSONAGE,PERSONEXACTAGE,PERSONMARITALSTATUS,INFERREDAGE,OCCUPATIONGROUP,PERSONOCCUPATION,ETHNICCODE,LANGUAGECODE,ETHNICGROUP,RELIGIONCODE,HISPANICCOUNTRYCODE,PERSONEDUCATION,BUSINESSOWNER,INFERREDHOUSEHOLDRANK,NUMBEROFADULTS,GENERATIONSINHOUSEHOLD,PRESENCEOFCREDITCARD,PRESENCEOFGOLDORPLATINUMCREDITCARD,PRESENCEOFPREMIUMCREDITCARD,CREDITRATING,INVESTMENT,INVESTMENTSTOCKSECURITIES,NETWORTH,NUMBEROFLINESOFCREDIT,CREDIT_RANGEOFNEWCREDIT,TRAVELANDENTERTAINMENTCARDHOLDER,CREDITCARDUSER,CREDITCARDNEWISSUE,INVESTING_ACTIVE,INVESTMENTSPERSONAL,INVESTMENTSREALESTATE,INVESTINGFINANCEGROUPING,INVESTMENTSFOREIGN,INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED,VALUEHUNTER,OPPORTUNITYSEEKERS,NEWSANDFINANCIAL,AUTOMOTIVEBUFF,BOOKREADER,COMPUTEROWNER,COOKINGENTHUSIAST,DO_IT_YOURSELFERS,EXERCISEENTHUSIAST,GARDENER,GOLFENTHUSIASTS,HOMEDECORATINGENTHUSIAST,OUTDOORENTHUSIAST,OUTDOORSPORTSLOVER,PHOTOGRAPHY,TRAVELER,PETS,CATS,DOGS,MAILRESPONDER,SWEEPSTAKES,RELIGIOUSMAGAZINE,MALEMERCHBUYER,FEMALEMERCHBUYER,CRAFTS_HOBBMERCHBUYER,GARDENING_FARMINGBUYER,BOOKBUYER,COLLECT_SPECIALFOODSBUYER,RELIGIOUSCONTRIBUTOR,POLITICALCONTRIBUTOR,CHARITABLE,DONATESTOENVIRONMENTALCAUSES,VETERANINHOUSEHOLD,HIGHTECHLEADER,SMOKER,MAILORDERBUYER,ONLINEPURCHASINGINDICATOR,APPARELWOMENS,YOUNGWOMENSAPPAREL,APPARELMENS,APPARELMENSBIGANDTALL,YOUNGMENSAPPAREL,APPARELCHILDRENS,HEALTHANDBEAUTY,BEAUTYCOSMETICS,JEWELRY,LUGGAGE,POLITICALCONSERVATIVECHARITABLEDONATION,POLITICALLIBERALCHARITABLEDONATION,VETERANSCHARITABLEDONATION,SINGLEPARENT,SENIORADULTINHOUSEHOLD,EQUESTRIAN,CAREERIMPROVEMENT,WORKINGWOMAN,AFRICANAMERICANPROFESSIONALS,SOHOINDICATOR,CAREER,READINGSCIENCEFICTION,READINGAUDIOBOOKS,HISTORYMILITARY,CURRENTAFFAIRSPOLITICS,SCIENCESPACE,EDUCATIONONLINE,GAMING,COMPUTINGHOMEOFFICEGENERAL,ELECTRONICSCOMPUTINGANDHOMEOFFICE,HIGHENDAPPLIANCES,INTENDTOPURCHASEHDTVSATELLITEDISH,TVCABLE,GAMESVIDEOGAMES,TVSATELLITEDISH,COMPUTERS,GAMESCOMPUTERGAMES,CONSUMERELECTRONICS,MOVIEMUSICGROUPING,ELECTRONICSCOMPUTERSGROUPING,TELECOMMUNICATIONS,ARTS,MUSICALINSTRUMENTS,COLLECTIBLESSTAMPS,COLLECTIBLESCOINS,COLLECTIBLESARTS,COLLECTIBLESANTIQUES,COLLECTIBLESSPORTSMEMORABILIA,MILITARYMEMORABILIAWEAPONRY,AUTOWORK,WOODWORKING,AVIATION,HOUSEPLANTS,HOMEANDGARDEN,HOMEIMPROVEMENTGROUPING,PHOTOGRAPHYANDVIDEOEQUIPMENT,HOMEFURNISHINGSDECORATING,HOMEIMPROVEMENT,INTENDTOPURCHASEHOMEIMPROVEMENT,FOODWINES,COOKINGGENERAL,COOKINGGOURMET,FOODSNATURAL,COOKINGFOODGROUPING,GAMINGCASINO,TRAVELGROUPING,TRAVEL,TRAVELDOMESTIC,TRAVELINTERNATIONAL,TRAVELCRUISEVACATIONS,UPSCALELIVING,CULTURALARTISTICLIVING,HIGHTECHLIVING,EXERCISEHEALTHGROUPING,EXERCISERUNNINGJOGGING,EXERCISEWALKING,EXERCISEAEROBIC,SPECTATORSPORTSTVSPORTS,SPECTATORSPORTSFOOTBALL,SPECTATORSPORTSBASEBALL,SPECTATORSPORTSBASKETBALL,SPECTATORSPORTSHOCKEY,SPECTATORSPORTSSOCCER,TENNIS,SNOWSKIING,MOTORCYCLING,NASCAR,BOATINGSAILING,SCUBADIVING,SPORTSANDLEISURE,HUNTING,FISHING,CAMPINGHIKING,HUNTINGSHOOTING,SPORTSGROUPING,OUTDOORSGROUPING,HEALTHMEDICAL,DIETINGWEIGHTLOSS,SELFIMPROVEMENT,AUTOMOTIVEAUTOPARTSANDACCESSORIES,HOMESWIMMINGPOOLINDICATOR,AIRCONDITIONING,HOMEHEATINDICATOR,HOMEPURCHASEPRICE,HOMEPURCHASEDATEYEAR,HOMEPURCHASEDATEMONTH,HOMEPURCHASEDATEDAY,HOMEPURCHASEDATE,HOMEYEARBUILT,ESTIMATEDCURRENTHOMEVALUECODE,MORTGAGEAMOUNTINTHOUSANDS,MORTGAGELENDERNAME,MORTGAGELENDERNAMEAVAILABLE,MORTGAGERATE,MORTGAGERATETYPE,MORTGAGELOANTYPE,TRANSACTIONTYPE,DEEDDATEOFREFINANCEYEAR,DEEDDATEOFREFINANCEMONTH,DEEDDATEOFREFINANCEDAY,DEEDDATEOFREFINANCE,REFINANCEAMOUNTINTHOUSANDS,REFINANCELENDERNAME,REFINANCELENDERNAMEAVAILABLE,REFINANCERATETYPE,REFINANCELOANTYPE,CENSUSMEDIANHOMEVALUE,CENSUSMEDIANHOUSEHOLDINCOME,CRA_INCOMECLASSIFICATIONCODE,PURCHASEMORTGAGEDATE,MOSTRECENTLENDERCODE,PURCHASELENDERNAME,MOSTRECENTMORTGAGEINTERESTRATE,SEWER,WATER,LOANTOVALUE,PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE,EMAILFLAG,EMAIL,HASH,CHILDRENAGE00_02, CHILDRENAGE00_02MALE, CHILDRENAGE00_02FEMALE, CHILDRENAGE00_02UNKNOWN, CHILDRENAGE03_05, CHILDRENAGE03_05MALE, CHILDRENAGE03_05FEMALE, CHILDRENAGE03_05UNKNOWN, CHILDRENAGE06_10, CHILDRENAGE06_10MALE, CHILDRENAGE06_10FEMALE, CHILDRENAGE06_10UNKNOWN, CHILDRENAGE11_15, CHILDRENAGE11_15MALE, CHILDRENAGE11_15FEMALE, CHILDRENAGE11_15UNKNOWN, CHILDRENAGE16_17, CHILDRENAGE16_17MALE, CHILDRENAGE16_17FEMALE, CHILDRENAGE16_17UNKNOWN, NUMBEROFSOURCES, DPV_CODE, IP, WEBSITE, MAKE, MODEL, YEAR, VIN, PHONE2)
        VALUES
        <foreach item="item" index="index" collection="consumerList"
                 open="" separator="," close="">
            (#{item.PERSONFIRSTNAME},#{item.carrier_name},#{item.PERSONMIDDLEINITIAL},#{item.PERSONLASTNAME},#{item.PRIMARYADDRESS},#{item.SECONDARYADDRESS},#{item.STATE},#{item.ST_CODE},#{item.ZIPCODE},#{item.ZIP_4},#{item.COUNTYCODE},#{item.COUNTYNAME},#{item.CITYNAME},#{item.DWELLINGTYPE},#{item.AREACODE},#{item.PHONE},#{item.PHONETYPE},#{item.DNC},#{item.ESTIMATEDINCOMECODE},#{item.HOMEOWNERPROBABILITYMODEL},#{item.LENGTHOFRESIDENCE},#{item.NUMBEROFPERSONSINLIVINGUNIT},#{item.PRESENCEOFCHILDREN},#{item.NUMBEROFCHILDREN},#{item.PERSONGENDER},#{item.PERSONDATEOFBIRTHDATE},#{item.PERSONAGE},#{item.PERSONEXACTAGE},#{item.PERSONMARITALSTATUS},#{item.INFERREDAGE},#{item.OCCUPATIONGROUP},#{item.PERSONOCCUPATION},#{item.ETHNICCODE},#{item.LANGUAGECODE},#{item.ETHNICGROUP},#{item.RELIGIONCODE},#{item.HISPANICCOUNTRYCODE},#{item.PERSONEDUCATION},#{item.BUSINESSOWNER},#{item.INFERREDHOUSEHOLDRANK},#{item.NUMBEROFADULTS},#{item.GENERATIONSINHOUSEHOLD},#{item.PRESENCEOFCREDITCARD},#{item.PRESENCEOFGOLDORPLATINUMCREDITCARD},#{item.PRESENCEOFPREMIUMCREDITCARD},#{item.CREDITRATING},#{item.INVESTMENT},#{item.INVESTMENTSTOCKSECURITIES},#{item.NETWORTH},#{item.NUMBEROFLINESOFCREDIT},#{item.CREDIT_RANGEOFNEWCREDIT},#{item.TRAVELANDENTERTAINMENTCARDHOLDER},#{item.CREDITCARDUSER},#{item.CREDITCARDNEWISSUE},#{item.INVESTING_ACTIVE},#{item.INVESTMENTSPERSONAL},#{item.INVESTMENTSREALESTATE},#{item.INVESTINGFINANCEGROUPING},#{item.INVESTMENTSFOREIGN},#{item.INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED},#{item.VALUEHUNTER},#{item.OPPORTUNITYSEEKERS},#{item.NEWSANDFINANCIAL},#{item.AUTOMOTIVEBUFF},#{item.BOOKREADER},#{item.COMPUTEROWNER},#{item.COOKINGENTHUSIAST},#{item.DO_IT_YOURSELFERS},#{item.EXERCISEENTHUSIAST},#{item.GARDENER},#{item.GOLFENTHUSIASTS},#{item.HOMEDECORATINGENTHUSIAST},#{item.OUTDOORENTHUSIAST},#{item.OUTDOORSPORTSLOVER},#{item.PHOTOGRAPHY},#{item.TRAVELER},#{item.PETS},#{item.CATS},#{item.DOGS},#{item.MAILRESPONDER},#{item.SWEEPSTAKES},#{item.RELIGIOUSMAGAZINE},#{item.MALEMERCHBUYER},#{item.FEMALEMERCHBUYER},#{item.CRAFTS_HOBBMERCHBUYER},#{item.GARDENING_FARMINGBUYER},#{item.BOOKBUYER},#{item.COLLECT_SPECIALFOODSBUYER},#{item.RELIGIOUSCONTRIBUTOR},#{item.POLITICALCONTRIBUTOR},#{item.CHARITABLE},#{item.DONATESTOENVIRONMENTALCAUSES},#{item.VETERANINHOUSEHOLD},#{item.HIGHTECHLEADER},#{item.SMOKER},#{item.MAILORDERBUYER},#{item.ONLINEPURCHASINGINDICATOR},#{item.APPARELWOMENS},#{item.YOUNGWOMENSAPPAREL},#{item.APPARELMENS},#{item.APPARELMENSBIGANDTALL},#{item.YOUNGMENSAPPAREL},#{item.APPARELCHILDRENS},#{item.HEALTHANDBEAUTY},#{item.BEAUTYCOSMETICS},#{item.JEWELRY},#{item.LUGGAGE},#{item.POLITICALCONSERVATIVECHARITABLEDONATION},#{item.POLITICALLIBERALCHARITABLEDONATION},#{item.VETERANSCHARITABLEDONATION},#{item.SINGLEPARENT},#{item.SENIORADULTINHOUSEHOLD},#{item.EQUESTRIAN},#{item.CAREERIMPROVEMENT},#{item.WORKINGWOMAN},#{item.AFRICANAMERICANPROFESSIONALS},#{item.SOHOINDICATOR},#{item.CAREER},#{item.READINGSCIENCEFICTION},#{item.READINGAUDIOBOOKS},#{item.HISTORYMILITARY},#{item.CURRENTAFFAIRSPOLITICS},#{item.SCIENCESPACE},#{item.EDUCATIONONLINE},#{item.GAMING},#{item.COMPUTINGHOMEOFFICEGENERAL},#{item.ELECTRONICSCOMPUTINGANDHOMEOFFICE},#{item.HIGHENDAPPLIANCES},#{item.INTENDTOPURCHASEHDTVSATELLITEDISH},#{item.TVCABLE},#{item.GAMESVIDEOGAMES},#{item.TVSATELLITEDISH},#{item.COMPUTERS},#{item.GAMESCOMPUTERGAMES},#{item.CONSUMERELECTRONICS},#{item.MOVIEMUSICGROUPING},#{item.ELECTRONICSCOMPUTERSGROUPING},#{item.TELECOMMUNICATIONS},#{item.ARTS},#{item.MUSICALINSTRUMENTS},#{item.COLLECTIBLESSTAMPS},#{item.COLLECTIBLESCOINS},#{item.COLLECTIBLESARTS},#{item.COLLECTIBLESANTIQUES},#{item.COLLECTIBLESSPORTSMEMORABILIA},#{item.MILITARYMEMORABILIAWEAPONRY},#{item.AUTOWORK},#{item.WOODWORKING},#{item.AVIATION},#{item.HOUSEPLANTS},#{item.HOMEANDGARDEN},#{item.HOMEIMPROVEMENTGROUPING},#{item.PHOTOGRAPHYANDVIDEOEQUIPMENT},#{item.HOMEFURNISHINGSDECORATING},#{item.HOMEIMPROVEMENT},#{item.INTENDTOPURCHASEHOMEIMPROVEMENT},#{item.FOODWINES},#{item.COOKINGGENERAL},#{item.COOKINGGOURMET},#{item.FOODSNATURAL},#{item.COOKINGFOODGROUPING},#{item.GAMINGCASINO},#{item.TRAVELGROUPING},#{item.TRAVEL},#{item.TRAVELDOMESTIC},#{item.TRAVELINTERNATIONAL},#{item.TRAVELCRUISEVACATIONS},#{item.UPSCALELIVING},#{item.CULTURALARTISTICLIVING},#{item.HIGHTECHLIVING},#{item.EXERCISEHEALTHGROUPING},#{item.EXERCISERUNNINGJOGGING},#{item.EXERCISEWALKING},#{item.EXERCISEAEROBIC},#{item.SPECTATORSPORTSTVSPORTS},#{item.SPECTATORSPORTSFOOTBALL},#{item.SPECTATORSPORTSBASEBALL},#{item.SPECTATORSPORTSBASKETBALL},#{item.SPECTATORSPORTSHOCKEY},#{item.SPECTATORSPORTSSOCCER},#{item.TENNIS},#{item.SNOWSKIING},#{item.MOTORCYCLING},#{item.NASCAR},#{item.BOATINGSAILING},#{item.SCUBADIVING},#{item.SPORTSANDLEISURE},#{item.HUNTING},#{item.FISHING},#{item.CAMPINGHIKING},#{item.HUNTINGSHOOTING},#{item.SPORTSGROUPING},#{item.OUTDOORSGROUPING},#{item.HEALTHMEDICAL},#{item.DIETINGWEIGHTLOSS},#{item.SELFIMPROVEMENT},#{item.AUTOMOTIVEAUTOPARTSANDACCESSORIES},#{item.HOMESWIMMINGPOOLINDICATOR},#{item.AIRCONDITIONING},#{item.HOMEHEATINDICATOR},#{item.HOMEPURCHASEPRICE},#{item.HOMEPURCHASEDATEYEAR},#{item.HOMEPURCHASEDATEMONTH},#{item.HOMEPURCHASEDATEDAY},#{item.HOMEPURCHASEDATE},#{item.HOMEYEARBUILT},#{item.ESTIMATEDCURRENTHOMEVALUECODE},#{item.MORTGAGEAMOUNTINTHOUSANDS},#{item.MORTGAGELENDERNAME},#{item.MORTGAGELENDERNAMEAVAILABLE},#{item.MORTGAGERATE},#{item.MORTGAGERATETYPE},#{item.MORTGAGELOANTYPE},#{item.TRANSACTIONTYPE},#{item.DEEDDATEOFREFINANCEYEAR},#{item.DEEDDATEOFREFINANCEMONTH},#{item.DEEDDATEOFREFINANCEDAY},#{item.DEEDDATEOFREFINANCE},#{item.REFINANCEAMOUNTINTHOUSANDS},#{item.REFINANCELENDERNAME},#{item.REFINANCELENDERNAMEAVAILABLE},#{item.REFINANCERATETYPE},#{item.REFINANCELOANTYPE},#{item.CENSUSMEDIANHOMEVALUE},#{item.CENSUSMEDIANHOUSEHOLDINCOME},#{item.CRA_INCOMECLASSIFICATIONCODE},#{item.PURCHASEMORTGAGEDATE},#{item.MOSTRECENTLENDERCODE},#{item.PURCHASELENDERNAME},#{item.MOSTRECENTMORTGAGEINTERESTRATE},#{item.SEWER},#{item.WATER},#{item.LOANTOVALUE},#{item.PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE},#{item.EMAILFLAG},#{item.email},md5(#{item.PHONE}),#{item.CHILDRENAGE00_02},#{item.CHILDRENAGE00_02MALE},#{item.CHILDRENAGE00_02FEMALE},#{item.CHILDRENAGE00_02UNKNOWN},#{item.CHILDRENAGE03_05},#{item.CHILDRENAGE03_05MALE},#{item.CHILDRENAGE03_05FEMALE},#{item.CHILDRENAGE03_05UNKNOWN},#{item.CHILDRENAGE06_10},#{item.CHILDRENAGE06_10MALE},#{item.CHILDRENAGE06_10FEMALE},#{item.CHILDRENAGE06_10UNKNOWN},#{item.CHILDRENAGE11_15},#{item.CHILDRENAGE11_15MALE},#{item.CHILDRENAGE11_15FEMALE},#{item.CHILDRENAGE11_15UNKNOWN},#{item.CHILDRENAGE16_17},#{item.CHILDRENAGE16_17MALE},#{item.CHILDRENAGE16_17FEMALE},#{item.CHILDRENAGE16_17UNKNOWN},#{item.NUMBEROFSOURCES},#{item.DPV_CODE},#{item.ip},#{item.url},#{item.make},#{item.model},#{item.year},#{item.vin},#{item.phone2})
        </foreach>
    </insert>

    <insert id="insertConsumers2WithIds">
        INSERT INTO ${tableName}(id,PERSONFIRSTNAME,PERSONMIDDLEINITIAL,PERSONLASTNAME,PRIMARYADDRESS,SECONDARYADDRESS,STATE,ST_CODE,ZIPCODE,ZIP_4,COUNTYCODE,COUNTYNAME,CITYNAME,DWELLINGTYPE,AREACODE,PHONE,PHONETYPE,DNC,ESTIMATEDINCOMECODE,HOMEOWNERPROBABILITYMODEL,LENGTHOFRESIDENCE,NUMBEROFPERSONSINLIVINGUNIT,PRESENCEOFCHILDREN,NUMBEROFCHILDREN,PERSONGENDER,PERSONDATEOFBIRTHDATE,PERSONAGE,PERSONEXACTAGE,PERSONMARITALSTATUS,INFERREDAGE,OCCUPATIONGROUP,PERSONOCCUPATION,ETHNICCODE,LANGUAGECODE,ETHNICGROUP,RELIGIONCODE,HISPANICCOUNTRYCODE,PERSONEDUCATION,BUSINESSOWNER,INFERREDHOUSEHOLDRANK,NUMBEROFADULTS,GENERATIONSINHOUSEHOLD,PRESENCEOFCREDITCARD,PRESENCEOFGOLDORPLATINUMCREDITCARD,PRESENCEOFPREMIUMCREDITCARD,CREDITRATING,INVESTMENT,INVESTMENTSTOCKSECURITIES,NETWORTH,NUMBEROFLINESOFCREDIT,CREDIT_RANGEOFNEWCREDIT,TRAVELANDENTERTAINMENTCARDHOLDER,CREDITCARDUSER,CREDITCARDNEWISSUE,INVESTING_ACTIVE,INVESTMENTSPERSONAL,INVESTMENTSREALESTATE,INVESTINGFINANCEGROUPING,INVESTMENTSFOREIGN,INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED,VALUEHUNTER,OPPORTUNITYSEEKERS,NEWSANDFINANCIAL,AUTOMOTIVEBUFF,BOOKREADER,COMPUTEROWNER,COOKINGENTHUSIAST,DO_IT_YOURSELFERS,EXERCISEENTHUSIAST,GARDENER,GOLFENTHUSIASTS,HOMEDECORATINGENTHUSIAST,OUTDOORENTHUSIAST,OUTDOORSPORTSLOVER,PHOTOGRAPHY,TRAVELER,PETS,CATS,DOGS,MAILRESPONDER,SWEEPSTAKES,RELIGIOUSMAGAZINE,MALEMERCHBUYER,FEMALEMERCHBUYER,CRAFTS_HOBBMERCHBUYER,GARDENING_FARMINGBUYER,BOOKBUYER,COLLECT_SPECIALFOODSBUYER,RELIGIOUSCONTRIBUTOR,POLITICALCONTRIBUTOR,CHARITABLE,DONATESTOENVIRONMENTALCAUSES,VETERANINHOUSEHOLD,HIGHTECHLEADER,SMOKER,MAILORDERBUYER,ONLINEPURCHASINGINDICATOR,APPARELWOMENS,YOUNGWOMENSAPPAREL,APPARELMENS,APPARELMENSBIGANDTALL,YOUNGMENSAPPAREL,APPARELCHILDRENS,HEALTHANDBEAUTY,BEAUTYCOSMETICS,JEWELRY,LUGGAGE,POLITICALCONSERVATIVECHARITABLEDONATION,POLITICALLIBERALCHARITABLEDONATION,VETERANSCHARITABLEDONATION,SINGLEPARENT,SENIORADULTINHOUSEHOLD,EQUESTRIAN,CAREERIMPROVEMENT,WORKINGWOMAN,AFRICANAMERICANPROFESSIONALS,SOHOINDICATOR,CAREER,READINGSCIENCEFICTION,READINGAUDIOBOOKS,HISTORYMILITARY,CURRENTAFFAIRSPOLITICS,SCIENCESPACE,EDUCATIONONLINE,GAMING,COMPUTINGHOMEOFFICEGENERAL,ELECTRONICSCOMPUTINGANDHOMEOFFICE,HIGHENDAPPLIANCES,INTENDTOPURCHASEHDTVSATELLITEDISH,TVCABLE,GAMESVIDEOGAMES,TVSATELLITEDISH,COMPUTERS,GAMESCOMPUTERGAMES,CONSUMERELECTRONICS,MOVIEMUSICGROUPING,ELECTRONICSCOMPUTERSGROUPING,TELECOMMUNICATIONS,ARTS,MUSICALINSTRUMENTS,COLLECTIBLESSTAMPS,COLLECTIBLESCOINS,COLLECTIBLESARTS,COLLECTIBLESANTIQUES,COLLECTIBLESSPORTSMEMORABILIA,MILITARYMEMORABILIAWEAPONRY,AUTOWORK,WOODWORKING,AVIATION,HOUSEPLANTS,HOMEANDGARDEN,HOMEIMPROVEMENTGROUPING,PHOTOGRAPHYANDVIDEOEQUIPMENT,HOMEFURNISHINGSDECORATING,HOMEIMPROVEMENT,INTENDTOPURCHASEHOMEIMPROVEMENT,FOODWINES,COOKINGGENERAL,COOKINGGOURMET,FOODSNATURAL,COOKINGFOODGROUPING,GAMINGCASINO,TRAVELGROUPING,TRAVEL,TRAVELDOMESTIC,TRAVELINTERNATIONAL,TRAVELCRUISEVACATIONS,UPSCALELIVING,CULTURALARTISTICLIVING,HIGHTECHLIVING,EXERCISEHEALTHGROUPING,EXERCISERUNNINGJOGGING,EXERCISEWALKING,EXERCISEAEROBIC,SPECTATORSPORTSTVSPORTS,SPECTATORSPORTSFOOTBALL,SPECTATORSPORTSBASEBALL,SPECTATORSPORTSBASKETBALL,SPECTATORSPORTSHOCKEY,SPECTATORSPORTSSOCCER,TENNIS,SNOWSKIING,MOTORCYCLING,NASCAR,BOATINGSAILING,SCUBADIVING,SPORTSANDLEISURE,HUNTING,FISHING,CAMPINGHIKING,HUNTINGSHOOTING,SPORTSGROUPING,OUTDOORSGROUPING,HEALTHMEDICAL,DIETINGWEIGHTLOSS,SELFIMPROVEMENT,AUTOMOTIVEAUTOPARTSANDACCESSORIES,HOMESWIMMINGPOOLINDICATOR,AIRCONDITIONING,HOMEHEATINDICATOR,HOMEPURCHASEPRICE,HOMEPURCHASEDATEYEAR,HOMEPURCHASEDATEMONTH,HOMEPURCHASEDATEDAY,HOMEPURCHASEDATE,HOMEYEARBUILT,ESTIMATEDCURRENTHOMEVALUECODE,MORTGAGEAMOUNTINTHOUSANDS,MORTGAGELENDERNAME,MORTGAGELENDERNAMEAVAILABLE,MORTGAGERATE,MORTGAGERATETYPE,MORTGAGELOANTYPE,TRANSACTIONTYPE,DEEDDATEOFREFINANCEYEAR,DEEDDATEOFREFINANCEMONTH,DEEDDATEOFREFINANCEDAY,DEEDDATEOFREFINANCE,REFINANCEAMOUNTINTHOUSANDS,REFINANCELENDERNAME,REFINANCELENDERNAMEAVAILABLE,REFINANCERATETYPE,REFINANCELOANTYPE,CENSUSMEDIANHOMEVALUE,CENSUSMEDIANHOUSEHOLDINCOME,CRA_INCOMECLASSIFICATIONCODE,PURCHASEMORTGAGEDATE,MOSTRECENTLENDERCODE,PURCHASELENDERNAME,MOSTRECENTMORTGAGEINTERESTRATE,SEWER,WATER,LOANTOVALUE,PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE,EMAILFLAG,EMAIL,HASH)
        VALUES
        <foreach item="item" index="index" collection="consumerList"
                 open="" separator="," close="">
            (#{item.id},#{item.PERSONFIRSTNAME},#{item.PERSONMIDDLEINITIAL},#{item.PERSONLASTNAME},#{item.PRIMARYADDRESS},#{item.SECONDARYADDRESS},#{item.STATE},#{item.ST_CODE},#{item.ZIPCODE},#{item.ZIP_4},#{item.COUNTYCODE},#{item.COUNTYNAME},#{item.CITYNAME},#{item.DWELLINGTYPE},#{item.AREACODE},#{item.PHONE},#{item.PHONETYPE},#{item.DNC},#{item.ESTIMATEDINCOMECODE},#{item.HOMEOWNERPROBABILITYMODEL},#{item.LENGTHOFRESIDENCE},#{item.NUMBEROFPERSONSINLIVINGUNIT},#{item.PRESENCEOFCHILDREN},#{item.NUMBEROFCHILDREN},#{item.PERSONGENDER},#{item.PERSONDATEOFBIRTHDATE},#{item.PERSONAGE},#{item.PERSONEXACTAGE},#{item.PERSONMARITALSTATUS},#{item.INFERREDAGE},#{item.OCCUPATIONGROUP},#{item.PERSONOCCUPATION},#{item.ETHNICCODE},#{item.LANGUAGECODE},#{item.ETHNICGROUP},#{item.RELIGIONCODE},#{item.HISPANICCOUNTRYCODE},#{item.PERSONEDUCATION},#{item.BUSINESSOWNER},#{item.INFERREDHOUSEHOLDRANK},#{item.NUMBEROFADULTS},#{item.GENERATIONSINHOUSEHOLD},#{item.PRESENCEOFCREDITCARD},#{item.PRESENCEOFGOLDORPLATINUMCREDITCARD},#{item.PRESENCEOFPREMIUMCREDITCARD},#{item.CREDITRATING},#{item.INVESTMENT},#{item.INVESTMENTSTOCKSECURITIES},#{item.NETWORTH},#{item.NUMBEROFLINESOFCREDIT},#{item.CREDIT_RANGEOFNEWCREDIT},#{item.TRAVELANDENTERTAINMENTCARDHOLDER},#{item.CREDITCARDUSER},#{item.CREDITCARDNEWISSUE},#{item.INVESTING_ACTIVE},#{item.INVESTMENTSPERSONAL},#{item.INVESTMENTSREALESTATE},#{item.INVESTINGFINANCEGROUPING},#{item.INVESTMENTSFOREIGN},#{item.INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED},#{item.VALUEHUNTER},#{item.OPPORTUNITYSEEKERS},#{item.NEWSANDFINANCIAL},#{item.AUTOMOTIVEBUFF},#{item.BOOKREADER},#{item.COMPUTEROWNER},#{item.COOKINGENTHUSIAST},#{item.DO_IT_YOURSELFERS},#{item.EXERCISEENTHUSIAST},#{item.GARDENER},#{item.GOLFENTHUSIASTS},#{item.HOMEDECORATINGENTHUSIAST},#{item.OUTDOORENTHUSIAST},#{item.OUTDOORSPORTSLOVER},#{item.PHOTOGRAPHY},#{item.TRAVELER},#{item.PETS},#{item.CATS},#{item.DOGS},#{item.MAILRESPONDER},#{item.SWEEPSTAKES},#{item.RELIGIOUSMAGAZINE},#{item.MALEMERCHBUYER},#{item.FEMALEMERCHBUYER},#{item.CRAFTS_HOBBMERCHBUYER},#{item.GARDENING_FARMINGBUYER},#{item.BOOKBUYER},#{item.COLLECT_SPECIALFOODSBUYER},#{item.RELIGIOUSCONTRIBUTOR},#{item.POLITICALCONTRIBUTOR},#{item.CHARITABLE},#{item.DONATESTOENVIRONMENTALCAUSES},#{item.VETERANINHOUSEHOLD},#{item.HIGHTECHLEADER},#{item.SMOKER},#{item.MAILORDERBUYER},#{item.ONLINEPURCHASINGINDICATOR},#{item.APPARELWOMENS},#{item.YOUNGWOMENSAPPAREL},#{item.APPARELMENS},#{item.APPARELMENSBIGANDTALL},#{item.YOUNGMENSAPPAREL},#{item.APPARELCHILDRENS},#{item.HEALTHANDBEAUTY},#{item.BEAUTYCOSMETICS},#{item.JEWELRY},#{item.LUGGAGE},#{item.POLITICALCONSERVATIVECHARITABLEDONATION},#{item.POLITICALLIBERALCHARITABLEDONATION},#{item.VETERANSCHARITABLEDONATION},#{item.SINGLEPARENT},#{item.SENIORADULTINHOUSEHOLD},#{item.EQUESTRIAN},#{item.CAREERIMPROVEMENT},#{item.WORKINGWOMAN},#{item.AFRICANAMERICANPROFESSIONALS},#{item.SOHOINDICATOR},#{item.CAREER},#{item.READINGSCIENCEFICTION},#{item.READINGAUDIOBOOKS},#{item.HISTORYMILITARY},#{item.CURRENTAFFAIRSPOLITICS},#{item.SCIENCESPACE},#{item.EDUCATIONONLINE},#{item.GAMING},#{item.COMPUTINGHOMEOFFICEGENERAL},#{item.ELECTRONICSCOMPUTINGANDHOMEOFFICE},#{item.HIGHENDAPPLIANCES},#{item.INTENDTOPURCHASEHDTVSATELLITEDISH},#{item.TVCABLE},#{item.GAMESVIDEOGAMES},#{item.TVSATELLITEDISH},#{item.COMPUTERS},#{item.GAMESCOMPUTERGAMES},#{item.CONSUMERELECTRONICS},#{item.MOVIEMUSICGROUPING},#{item.ELECTRONICSCOMPUTERSGROUPING},#{item.TELECOMMUNICATIONS},#{item.ARTS},#{item.MUSICALINSTRUMENTS},#{item.COLLECTIBLESSTAMPS},#{item.COLLECTIBLESCOINS},#{item.COLLECTIBLESARTS},#{item.COLLECTIBLESANTIQUES},#{item.COLLECTIBLESSPORTSMEMORABILIA},#{item.MILITARYMEMORABILIAWEAPONRY},#{item.AUTOWORK},#{item.WOODWORKING},#{item.AVIATION},#{item.HOUSEPLANTS},#{item.HOMEANDGARDEN},#{item.HOMEIMPROVEMENTGROUPING},#{item.PHOTOGRAPHYANDVIDEOEQUIPMENT},#{item.HOMEFURNISHINGSDECORATING},#{item.HOMEIMPROVEMENT},#{item.INTENDTOPURCHASEHOMEIMPROVEMENT},#{item.FOODWINES},#{item.COOKINGGENERAL},#{item.COOKINGGOURMET},#{item.FOODSNATURAL},#{item.COOKINGFOODGROUPING},#{item.GAMINGCASINO},#{item.TRAVELGROUPING},#{item.TRAVEL},#{item.TRAVELDOMESTIC},#{item.TRAVELINTERNATIONAL},#{item.TRAVELCRUISEVACATIONS},#{item.UPSCALELIVING},#{item.CULTURALARTISTICLIVING},#{item.HIGHTECHLIVING},#{item.EXERCISEHEALTHGROUPING},#{item.EXERCISERUNNINGJOGGING},#{item.EXERCISEWALKING},#{item.EXERCISEAEROBIC},#{item.SPECTATORSPORTSTVSPORTS},#{item.SPECTATORSPORTSFOOTBALL},#{item.SPECTATORSPORTSBASEBALL},#{item.SPECTATORSPORTSBASKETBALL},#{item.SPECTATORSPORTSHOCKEY},#{item.SPECTATORSPORTSSOCCER},#{item.TENNIS},#{item.SNOWSKIING},#{item.MOTORCYCLING},#{item.NASCAR},#{item.BOATINGSAILING},#{item.SCUBADIVING},#{item.SPORTSANDLEISURE},#{item.HUNTING},#{item.FISHING},#{item.CAMPINGHIKING},#{item.HUNTINGSHOOTING},#{item.SPORTSGROUPING},#{item.OUTDOORSGROUPING},#{item.HEALTHMEDICAL},#{item.DIETINGWEIGHTLOSS},#{item.SELFIMPROVEMENT},#{item.AUTOMOTIVEAUTOPARTSANDACCESSORIES},#{item.HOMESWIMMINGPOOLINDICATOR},#{item.AIRCONDITIONING},#{item.HOMEHEATINDICATOR},#{item.HOMEPURCHASEPRICE},#{item.HOMEPURCHASEDATEYEAR},#{item.HOMEPURCHASEDATEMONTH},#{item.HOMEPURCHASEDATEDAY},#{item.HOMEPURCHASEDATE},#{item.HOMEYEARBUILT},#{item.ESTIMATEDCURRENTHOMEVALUECODE},#{item.MORTGAGEAMOUNTINTHOUSANDS},#{item.MORTGAGELENDERNAME},#{item.MORTGAGELENDERNAMEAVAILABLE},#{item.MORTGAGERATE},#{item.MORTGAGERATETYPE},#{item.MORTGAGELOANTYPE},#{item.TRANSACTIONTYPE},#{item.DEEDDATEOFREFINANCEYEAR},#{item.DEEDDATEOFREFINANCEMONTH},#{item.DEEDDATEOFREFINANCEDAY},#{item.DEEDDATEOFREFINANCE},#{item.REFINANCEAMOUNTINTHOUSANDS},#{item.REFINANCELENDERNAME},#{item.REFINANCELENDERNAMEAVAILABLE},#{item.REFINANCERATETYPE},#{item.REFINANCELOANTYPE},#{item.CENSUSMEDIANHOMEVALUE},#{item.CENSUSMEDIANHOUSEHOLDINCOME},#{item.CRA_INCOMECLASSIFICATIONCODE},#{item.PURCHASEMORTGAGEDATE},#{item.MOSTRECENTLENDERCODE},#{item.PURCHASELENDERNAME},#{item.MOSTRECENTMORTGAGEINTERESTRATE},#{item.SEWER},#{item.WATER},#{item.LOANTOVALUE},#{item.PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE},#{item.EMAILFLAG},#{item.email},md5(#{item.PHONE}))
        </foreach>
    </insert>

    <insert id="insertFacebook">
        INSERT INTO ${tableName}(PHONE,first_name, last_name, gender, CITY, ST, status, job, county, st_code, phoneType, dnc, AREA_CODE,hash,data)
        VALUES
        <foreach item="item" index="index" collection="facebookList"
                 open="" separator="," close="">
            (#{item.phone},#{item.first_name}, #{item.last_name}, #{item.gender}, #{item.city}, #{item.ST}, #{item.status}, #{item.job}, #{item.county}, #{item.ST_CODE}, #{item.phoneType}, #{item.dnc}, #{item.AREA_CODE},md5(#{item.phone}),#{item.data})
        </foreach>
    </insert>

    <insert id="insertInstagram">
        INSERT INTO ${tableName}(username, fullname, email, website, phone, hash, category, state, zipCode, city, street, county, st_code, phoneType, dnc, areaCode, date)
        VALUES
        <foreach item="item" index="index" collection="instagramList"
                 open="" separator="," close="">
            (#{item.username}, #{item.fullname}, #{item.email}, #{item.website}, #{item.phone}, md5(#{item.phone}), #{item.category}, #{item.state}, #{item.zipCode}, #{item.city}, #{item.street}, #{item.county}, #{item.st_code}, #{item.phoneType}, #{item.dnc}, #{item.areaCode}, #{item.date})
        </foreach>
    </insert>

    <insert id="insertInstagram2020">
        INSERT INTO ${tableName}(username, fullname, email, website, phone, hash, category, state, zipCode, city, street, county, st_code, phoneType, dnc, areaCode, date, publicationsCount, followersCount, subscriptionsCount, runsAds, feedAdsCount, storyAdsCount, biography)
        VALUES
        <foreach item="item" index="index" collection="instagramList"
                 open="" separator="," close="">
            (#{item.username}, #{item.fullname}, #{item.email}, #{item.website}, #{item.phone}, md5(#{item.phone}), #{item.category}, #{item.state}, #{item.zipCode}, #{item.city}, #{item.street}, #{item.county}, #{item.st_code}, #{item.phoneType}, #{item.dnc}, #{item.areaCode}, #{item.date}, #{item.publicationsCount}, #{item.followersCount}, #{item.subscriptionsCount}, #{item.runsAds}, #{item.feedAdsCount}, #{item.storyAdsCount}, #{item.biography})
        </foreach>
    </insert>

    <insert id="insertNewOptIn">
        INSERT INTO
        ${tableName}(email,firstname,lastname,address,city,state,ST_CODE,zip5,zip4,county,PHONE,ip,NXX,CellPart,Carrier,date,CLEAN_SOURCE,hash,AREA_CODE,dnc,confirmed_email,phoneType,data)
        VALUES
        <foreach item="item" index="index" collection="optInList"
                 open="" separator="," close="">
            (#{item.email},#{item.firstname},#{item.lastname},#{item.address},#{item.city},#{item.state},#{item.st_code},#{item.zip5},#{item.zip4},#{item.county},#{item.phone},#{item.ip},#{item.NXX},#{item.CellPart},#{item.Carrier},#{item.date},#{item.CLEAN_SOURCE},MD5(CONCAT(#{item.email},#{item.firstname},#{item.lastname},#{item.address},#{item.city},#{item.state},#{item.zip5},#{item.zip4},#{item.phone},#{item.ip},#{item.NXX},#{item.CellPart},#{item.Carrier},#{item.date},#{item.CLEAN_SOURCE},#{item.AREA_CODE})),#{item.AREA_CODE},#{item.dnc},#{item.confirmedEmail},#{item.phoneType},#{item.data})
        </foreach>
    </insert>

    <insert id="insertEverydata">
        INSERT INTO
        ${tableName}(email,source,firstname,lastname,city,state,ST_CODE,county,PHONE,dob,hash,AREA_CODE,dnc,phoneType,data)
        VALUES
        <foreach item="item" index="index" collection="everyDataList"
                 open="" separator="," close="">
            ('${item.email}','${item.source}','${item.firstname}','${item.lastname}','${item.CITY}','${item.STATE}','${item.ST_CODE}','${item.COUNTY}','${item.PHONE}',${item.dobDate},MD5(CONCAT('${item.email}','${item.source}','${item.firstname}','${item.lastname}','${item.CITY}','${item.STATE}','${item.ST_CODE}','${item.COUNTY}','${item.PHONE}',${item.dobDate})),'${item.AREA_CODE}','${item.dnc}','${item.phoneType}','${item.data}')
        </foreach>
    </insert>


    <insert id="insertOptIn">
        INSERT INTO ${tableName}(email, firstName, lastName, address, city, county, state, st_code, zip, zipCode, phone, phoneType, dnc, areaCode, ip, date, source, sourceCriteria, genderCode, dobDate, hash)
        VALUES
        <foreach item="item" index="index" collection="optInList"
                 open="" separator="," close="">
            (#{item.email}, #{item.firstName}, #{item.lastName}, #{item.address}, #{item.city}, #{item.county}, #{item.state}, #{item.st_code}, #{item.zip}, #{item.zipCode}, #{item.phone}, #{item.phoneType}, #{item.dnc}, #{item.areaCode}, #{item.ip}, #{item.date}, #{item.source}, #{item.sourceCriteria}, #{item.genderCode}, #{item.dobDate}, md5(#{item.phone}))
        </foreach>
    </insert>

    <update id="updateBusinessOwner">
        UPDATE ${tableName} SET BUSINESSOWNER = '8' WHERE id IN
        <foreach item="item" index="index" collection="items"
                 open="(" separator="," close=")">
            #{item.id}
        </foreach>
    </update>

    <insert id="insertBusinesses">
        INSERT INTO ${tableName}(ADDRESS,ANNUAL_SALES,CITY,COMPANY_NAME,CONTACT_NAME,COUNTY,EMPLOYEE,FAX,GENDER,INDUSTRY,LATITUDE,LONGITUDE,PHONE,phoneType,SIC_CODE,SIC,STATE,ST_CODE,TITLE,WWW,ZIP,ZIP_CODE,AREA_CODE,hash,dnc) VALUES
        <foreach item="item" index="index" collection="businessList"
                 open="" separator="," close="">
            (#{item.ADDRESS},#{item.ANNUAL_SALES},#{item.CITY},#{item.COMPANY_NAME},#{item.CONTACT_NAME},#{item.COUNTY},#{item.EMPLOYEE},#{item.FAX},#{item.GENDER},#{item.INDUSTRY},#{item.LATITUDE},#{item.LONGITUDE},#{item.PHONE},#{item.phoneType},#{item.SIC_CODE},#{item.SIC},#{item.STATE},#{item.ST_CODE},#{item.TITLE},#{item.WWW},#{item.ZIP},#{item.ZIP_CODE},#{item.AREA_CODE},md5(#{item.PHONE}),#{item.dnc})
        </foreach>
    </insert>

    <insert id="insertBusinessDetailedList">
        INSERT INTO ${tableName} (name,company,address,address2,city,county,phone,tollFreePhone,fax,nameFirst,middleName,nameLast,ethnicCode,ethnicGroup,languageCode,religionCode,www,totalEmployees,employeesOnSite,totalRevenue,revenue,yearFounded,minorityOwned,smallBusiness,largeBusiness,homeBusiness,importExport,publicCompany,headquartersBranch,stockExchange,franchiseFlag,individualFirmCode,SIC_CODE,appearedYear,femaleOwnedorOperated,whiteCollarCode,email,title,phoneContact,creditScore,SIC,STATE,ST_CODE,ZIP_CODE,AREA_CODE,ZIP,hash,phoneType,dnc) VALUES
        <foreach item="item" index="index" collection="businessDetailedList"
                 open="" separator="," close="">
            (#{item.name},#{item.company},#{item.address},#{item.address2},#{item.city},#{item.county},#{item.phone},#{item.tollFreePhone},#{item.fax},#{item.nameFirst},#{item.middleName},#{item.nameLast},#{item.ethnicCode},#{item.ethnicGroup},#{item.languageCode},#{item.religionCode},#{item.www},#{item.totalEmployees},#{item.employeesOnSite},#{item.totalRevenue},#{item.revenue},#{item.yearFounded},#{item.minorityOwned},#{item.smallBusiness},#{item.largeBusiness},#{item.homeBusiness},#{item.importExport},#{item.publicCompany},#{item.headquartersBranch},#{item.stockExchange},#{item.franchiseFlag},#{item.individualFirmCode},#{item.SIC_CODE},#{item.appearedYear},#{item.femaleOwnedorOperated},#{item.whiteCollarCode},#{item.email},#{item.title},#{item.phoneContact},#{item.creditScore},#{item.SIC},#{item.state},#{item.ST_CODE},#{item.ZIP_CODE},#{item.AREA_CODE},#{item.zip},md5(#{item.phone}),#{item.phoneType},#{item.dnc})
        </foreach>
    </insert>

    <insert id="insertStudentList">
        INSERT INTO ${tableName} (firstName,lastName,address,city,county,phone,hash,state,st_code,zip,zipCode,areaCode,phoneType,dnc,email,ip,fileName,date,source) VALUES
        <foreach item="item" index="index" collection="studentList"
                 open="" separator="," close="">
            (#{item.firstName},#{item.lastName},#{item.address},#{item.city},#{item.county},#{item.phone},md5(#{item.phone}),#{item.state},#{item.st_code},#{item.zip},#{item.zipCode},#{item.areaCode},#{item.phoneType},#{item.dnc},#{item.email},#{item.ip},#{item.fileName},#{item.date},#{item.source})
        </foreach>
    </insert>

    <insert id="insertBusinessesWithIds">
        INSERT INTO ${tableName}(id,ADDRESS,ANNUAL_SALES,CITY,COMPANY_NAME,CONTACT_NAME,COUNTY,EMPLOYEE,FAX,GENDER,INDUSTRY,LATITUDE,LONGITUDE,PHONE,phoneType,SIC_CODE,STATE,ST_CODE,TITLE,WWW,ZIP,ZIP_CODE,AREA_CODE,hash,DNC) VALUES
        <foreach item="item" index="index" collection="businessList"
                 open="" separator="," close="">
            (#{item.id},#{item.ADDRESS},#{item.ANNUAL_SALES},#{item.CITY},#{item.COMPANY_NAME},#{item.CONTACT_NAME},#{item.COUNTY},#{item.EMPLOYEE},#{item.FAX},#{item.GENDER},#{item.INDUSTRY},#{item.LATITUDE},#{item.LONGITUDE},#{item.PHONE},#{item.phoneType},#{item.SIC_CODE},#{item.STATE},#{item.ST_CODE},#{item.TITLE},#{item.WWW},#{item.ZIP},#{item.ZIP_CODE},#{item.AREA_CODE},md5(#{item.phone}),#{item.dnc})
        </foreach>
    </insert>

    <insert id="insertDirectories">
        INSERT INTO ${tableName}(ADDRESS,CITY,COMPANY_NAME,COUNTY,INDUSTRY,PHONE,phoneType,dnc,STATE,ST_CODE,WWW,ZIP,ZIP_CODE,AREA_CODE,DATE,hash,firstname,lastname,gender,ip,websites,email) VALUES
        <foreach item="item" index="index" collection="directoryList"
                 open="" separator="," close="">
            (#{item.ADDRESS},#{item.CITY},#{item.COMPANY_NAME},#{item.COUNTY},#{item.INDUSTRY},#{item.PHONE},#{item.phoneType},#{item.dnc},#{item.STATE},#{item.ST_CODE},#{item.WWW},#{item.ZIP},#{item.ZIP_CODE},#{item.AREA_CODE},#{item.TIMESTAMP},md5(#{item.PHONE}),#{item.firstname},#{item.lastname},#{item.gender},#{item.ip},#{item.websites},#{item.email})
        </foreach>
    </insert>

    <insert id="insertDebts">
        INSERT INTO ${tableName}(email,firstname,lastname,address,county,city,state,zip,phone,gender,date,ip,st_code,zip_code,phonetype,dnc,area_code,WWW,hash) VALUES
        <foreach item="item" index="index" collection="debtList"
                 open="" separator="," close="">
            (#{item.email},#{item.firstname},#{item.lastname},#{item.address},#{item.COUNTY},#{item.city},#{item.state},#{item.zip},#{item.phone},#{item.gender},#{item.TIMESTAMP},#{item.ip},#{item.ST_CODE},#{item.ZIP_CODE},#{item.phoneType},#{item.dnc},#{item.AREA_CODE},#{item.WWW},md5(#{item.email}))
        </foreach>
    </insert>

    <insert id="insertCraigsList">
        INSERT INTO ${tableName}(INDUSTRY,PHONE,phoneType,STATE,ST_CODE,AREA_CODE,website,date, hash, dnc) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.INDUSTRY},#{item.PHONE},#{item.phoneType},#{item.STATE},#{item.ST_CODE},#{item.AREA_CODE},#{item.website},#{item.date}, md5(#{item.PHONE}), #{item.dnc})
        </foreach>
    </insert>

    <insert id="insertWhoIsList">
        INSERT INTO ${tableName}(website, email, name, business, address, city, COUNTY, phone, STATE, ST_CODE, ZIP_CODE, AREA_CODE, hash, phoneType, date, dnc) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.website}, #{item.email}, #{item.name}, #{item.business}, #{item.address}, #{item.city}, #{item.COUNTY}, #{item.phone}, #{item.state}, #{item.ST_CODE}, #{item.ZIP_CODE}, #{item.AREA_CODE}, md5(#{item.phone}), #{item.phoneType}, #{item.date}, #{item.dnc})
        </foreach>
    </insert>

    <insert id="insertSearchEngineList">
        INSERT INTO ${tableName}(website, phone, phoneType, dnc, state, st_code, area_code) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.website}, #{item.phone}, #{item.phoneType}, #{item.dnc}, #{item.STATE}, #{item.ST_CODE}, #{item.AREA_CODE})
        </foreach>
    </insert>

    <insert id="insertAutoList">
        INSERT INTO ${tableName}(FIRST_NAME,LAST_NAME,ADDRESS,CITY,STATE,ZIP_CODE,VIN,YEAR,MAKE,MODEL,PHONE,date,ST_CODE,areaCode,dnc,phoneType,hash) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.FIRST_NAME},#{item.LAST_NAME},#{item.ADDRESS},#{item.CITY},#{item.STATE},#{item.ZIP_CODE},#{item.VIN},#{item.YEAR},#{item.MAKE},#{item.MODEL},#{item.PHONE},#{item.date},#{item.ST_CODE},#{item.areaCode},#{item.dnc},#{item.phoneType},md5(#{item.PHONE}))
        </foreach>
    </insert>

    <insert id="insertLinkedInList">
        INSERT INTO ${tableName}(email, companyName, firstName, lastName, title, address, city, county, state, zip, zipCode, phone, fax, website, ip, linkedInId, date, phoneType, ST_CODE, AREA_CODE, dnc, hash) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.email}, #{item.companyName}, #{item.firstName}, #{item.lastName}, #{item.title}, #{item.address}, #{item.city}, #{item.county}, #{item.state}, #{item.zip}, #{item.zipCode}, #{item.phone}, #{item.fax}, #{item.website}, #{item.ip}, #{item.linkedInId}, #{item.date}, #{item.phoneType}, #{item.ST_CODE}, #{item.AREA_CODE}, #{item.dnc}, md5(#{item.phone}))
        </foreach>
    </insert>

    <insert id="insertBlackList">
        INSERT INTO ${tableName}(state,phone,ST_CODE,areaCode,dnc,phoneType,hash) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.state},#{item.phone},#{item.ST_CODE},#{item.areaCode},#{item.dnc},#{item.phoneType},md5(#{item.phone}))
        </foreach>
    </insert>

    <insert id="insertCallLeadList">
        INSERT INTO ${tableName}(state,phone,ST_CODE,areaCode,dnc,phoneType,hash) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.state},#{item.phone},#{item.ST_CODE},#{item.areaCode},#{item.dnc},#{item.phoneType},md5(#{item.phone}))
        </foreach>
    </insert>

    <insert id="insertHealthBuyersList">
        INSERT INTO ${tableName}(name, email, address, city, state, phone, ST_CODE, county, ZIP_CODE, AREA_CODE, zip, hash, phoneType, dnc) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.name}, #{item.email}, #{item.address}, #{item.city}, #{item.state}, #{item.phone}, #{item.ST_CODE}, #{item.county}, #{item.ZIP_CODE}, #{item.AREA_CODE}, #{item.zip}, md5(#{item.phone}), #{item.phoneType}, #{item.dnc})
        </foreach>
    </insert>

    <insert id="insertHealthInsuranceLeadList">
        INSERT INTO ${tableName}(FIRSTNAME,LASTNAME,EMAIL,ADDRESS,GENDER,IP,CITY,STATE,PHONE,DOB_DATE,ST_CODE,COUNTY,ZIP_CODE,AREA_CODE,ZIPCODE,hash,phoneType,dnc,date) VALUES
        <foreach item="item" index="index" collection="items"
                 open="" separator="," close="">
            (#{item.FIRSTNAME},#{item.LASTNAME},#{item.EMAIL},#{item.ADDRESS},#{item.GENDER},#{item.IP},#{item.CITY},#{item.STATE},#{item.PHONE},#{item.DOB_DATE},#{item.ST_CODE},#{item.COUNTY},#{item.ZIP_CODE},#{item.AREA_CODE},#{item.ZIPCODE},md5(#{item.PHONE}),#{item.phoneType},#{item.dnc},#{item.date})
        </foreach>
    </insert>

    <insert id="insertZipCodeList">
        INSERT INTO zipCodes(state, code) VALUES
        <foreach item="item" index="index" collection="zipList"
                 open="" separator="," close="">
            (#{item.state}, #{item.code})
        </foreach>
    </insert>

    <insert id="insertAreaCodesList">
        INSERT INTO areaCodes(state, code) VALUES
        <foreach item="item" index="index" collection="areaCodeList"
                 open="" separator="," close="">
            (#{item.state}, #{item.code})
        </foreach>
    </insert>

    <select id="getDetailedRecordsCountByPurchasedList" resultType="Long">
        SELECT count(${countColumn}) FROM (
        SELECT ${tableName}.${countColumn} FROM ${tableName} JOIN purchasedUserListsItems
        ON purchasedUserListsItems.listId = #{listId} AND ${tableName}.id = purchasedUserListsItems.itemId
        ) subQuery WHERE
        <foreach item="item" collection="countOrConditions" separator=" OR ">
            ${item.key} ${item.relationship} #{item.value}
        </foreach>
    </select>

    <select id="getDetailedRecordsCountByNonPurchasedList" resultType="Long">
        SELECT count(${countColumn}) FROM (
        SELECT ${tableName}.${countColumn} FROM ${tableName} JOIN userListsItems
        ON userListsItems.listId = #{listId} AND ${tableName}.id = userListsItems.itemId
        ) subQuery WHERE
        <foreach item="item" collection="countOrConditions" separator=" OR ">
            ${item.key} ${item.relationship} #{item.value}
        </foreach>
    </select>

    <select id="getDetailedRecordsCount" resultType="Long">
        SELECT count(${countFiled}) FROM (
        <if test="unique">
            SELECT DISTINCT on (${tableName}.phone) ${tableName}.phone, ${tableName}.${countFiled} FROM ${tableName}
        </if>
        <if test="uniqueEmails">
            SELECT DISTINCT on (${tableName}.email) ${tableName}.email, ${tableName}.${countFiled} FROM ${tableName}
        </if>
        <if test="uniqueBusinessName">
            SELECT DISTINCT on (${tableName}.COMPANY_NAME) ${tableName}.COMPANY_NAME, ${tableName}.${countFiled} FROM ${tableName}
        </if>
        <if test="!unique">
            <if test="!uniqueBusinessName">
                <if test="!uniqueEmails">
                    SELECT ${tableName}.${countFiled} FROM ${tableName}
                </if>
            </if>
        </if>
        <if test="isBlackListMatch">
            LEFT JOIN responderOriginal ON ${tableName}.phone = responderOriginal.phone
        </if>
        <if test="isConsumerMatch">
            LEFT JOIN consumersOriginal ON ${tableName}.phone = consumersOriginal.phone
        </if>
        <if test="isCraigslistMatch">
            LEFT JOIN craigslistOriginal ON ${tableName}.phone = craigslistOriginal.phone
        </if>
        <if test="isDirectoryMatch">
            LEFT JOIN directoryOriginal ON ${tableName}.phone = directoryOriginal.phone
        </if>
        <if test="isBusinessDetailedMatch">
            LEFT JOIN DetailedBusinessOriginal ON ${tableName}.phone = DetailedBusinessOriginal.phone
        </if>
        <if test="isOptInMatch">
            LEFT JOIN optInOriginal ON ${tableName}.phone = optInOriginal.phone
        </if>

        <if test="isCallLeadsMatch">
            LEFT JOIN callLeadsOriginal ON ${tableName}.phone = callLeadsOriginal.phone
        </if>
        <if test="lists.size() > 0">
            LEFT JOIN purchasedUserListsItems puli
            ON ${tableName}.hash = puli.hash AND puli.listId IN
            <foreach item="purchasedListId" index="index" collection="lists"
                     open="(" separator="," close=")">
                #{purchasedListId}
            </foreach>
        </if>
        <if test="uploaded.size() > 0">
            LEFT JOIN uploadedListsItems uli ON ${tableName}.phone = uli.phone AND uli.listId IN
            <foreach item="uploadedListId" index="index" collection="uploaded"
                     open="(" separator="," close=")">
                #{uploadedListId}
            </foreach>
        </if>
        WHERE ( 1 = 1
        <if test="filterDNC">
            AND ${tableName}.dnc = false
        </if>
        <if test="filterEmptyPhone">
            AND ${tableName}.phone != ''
        </if>
        <if test="filterEmail">
            AND ${tableName}.email != ''
        </if>
        <if test="isFilterWebsite">
            AND ${tableName}.website != ''
        </if>
        <if test="filterBusinessEmail">
            AND ${tableName}.email1 != '' AND ${tableName}.email1 IS NOT NULL
        </if>
        <if test="orConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="orConditions"
                     open="(" separator=" OR " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" AND " close=")">
                    ${tableName}.${subItem.key} ${subItem.relationship} #{subItem.value}
                </foreach>
            </foreach>
        </if>
        ) AND ( 1 = 1
        <if test="andConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="andConditions"
                     open="(" separator=" AND " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" OR " close=")">
                    <foreach item="subSubItem" index="index" collection="subItem"
                             open="(" separator=" AND " close=")">
                        ${tableName}.${subSubItem.key} ${subSubItem.relationship} #{subSubItem.value}
                    </foreach>
                </foreach>
            </foreach>
        </if>
        )
        <if test="lists.size() > 0">
            AND puli.id IS NULL
        </if>
        <if test="uploaded.size() > 0">
            AND uli.id IS NULL
        </if>
        <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or isCallLeadsMatch">
            AND (
            <if test="isBlackListMatch">
                responderOriginal.id IS NOT NULL
            </if>
            <if test="isConsumerMatch">
                <if test="isBlackListMatch">OR</if>
                consumersOriginal.id IS NOT NULL
            </if>
            <if test="isCraigslistMatch">
                <if test="isBlackListMatch or isConsumerMatch">OR</if>
                craigslistOriginal.id IS NOT NULL
            </if>
            <if test="isDirectoryMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch">OR</if>
                directoryOriginal.id IS NOT NULL
            </if>
            <if test="isBusinessDetailedMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch">OR</if>
                DetailedBusinessOriginal.id IS NOT NULL
            </if>
            <if test="isOptInMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch">OR</if>
                optInOriginal.id IS NOT NULL
            </if>
            <if test="isCallLeadsMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch">OR</if>
                callLeadsOriginal.id IS NOT NULL
            </if>
            )
        </if>
        ) subQuery WHERE
        <foreach item="item" collection="countOrConditions" separator=" OR ">
            ${item.key} ${item.relationship} #{item.value}
        </foreach>
    </select>

    <select id="getRecordsCount" resultType="Long">
        <if test="unique">
            SELECT COUNT(*) FROM (SELECT count(*) FROM ${tableName}
            <!--   SELECT count(DISTINCT ${tableName}.phone) FROM ${tableName} -->
        </if>
        <if test="uniqueEmails">
            SELECT COUNT(*) FROM (SELECT count(*) FROM ${tableName}
            <!--  SELECT count(DISTINCT ${tableName}.email) FROM ${tableName} -->
        </if>
        <if test="uniqueBusinessName">
            SELECT COUNT(*) FROM (SELECT count(*) FROM ${tableName}
            <!--  SELECT count(DISTINCT ${tableName}.COMPANY_NAME) FROM ${tableName} -->
        </if>

        <if test='removeCorps and !tableName.contains("detailedBusiness")' >
            WITH CTE as (
            SELECT *
            ,Row_Number() OVER (
            PARTITION BY LOWER(${tableName}.COMPANY_NAME) ORDER BY ${tableName}.COMPANY_NAME DESC
            ) AS RowNum
            FROM ${tableName} )
            select count(*) from CTE as ${tableName}
        </if>
        <if test='removeCorps and tableName.contains("detailedBusiness")' >
            WITH CTE as (
            SELECT *
            ,Row_Number() OVER (
            PARTITION BY LOWER(${tableName}.COMPANY) ORDER BY ${tableName}.COMPANY DESC
            ) AS RowNum
            FROM ${tableName} )
            select count(*) from CTE as ${tableName}
        </if>

        <if test="!unique and !removeCorps">
            <if test="!uniqueBusinessName">
                <if test="!uniqueEmails">
                    SELECT count(${tableName}.id) FROM ${tableName}
                </if>
            </if>
        </if>
        <if test="isBlackListMatch">
            LEFT JOIN responderOriginal ON ${tableName}.phone = responderOriginal.phone
        </if>
        <if test="isConsumerMatch">
            LEFT JOIN consumersOriginal ON ${tableName}.phone = consumersOriginal.phone
        </if>
        <if test="isCraigslistMatch">
            LEFT JOIN craigslistOriginal ON ${tableName}.phone = craigslistOriginal.phone
        </if>
        <if test="isDirectoryMatch">
            LEFT JOIN directoryOriginal ON ${tableName}.phone = directoryOriginal.phone
        </if>
        <if test="isBusinessDetailedMatch">
            LEFT JOIN DetailedBusinessOriginal ON ${tableName}.phone = DetailedBusinessOriginal.phone
        </if>
        <if test="isOptInMatch">
            LEFT JOIN optInOriginal ON ${tableName}.phone = optInOriginal.phone
        </if>
        <if test="businessMatch">
            LEFT JOIN businessOriginal ON ${tableName}.phone = businessOriginal.phone
        </if>
        <if test="businessMatch2">
            LEFT JOIN business2Original ON ${tableName}.phone = business2Original.phone
        </if>
        <if test="consumer2018Match">
            LEFT JOIN consumer2018original ON ${tableName}.phone = consumer2018original.phone
        </if>
        <!--
        <if test="consumer2019Match">
            LEFT JOIN consumers2019Original ON ${tableName}.phone = consumers2019Original.phone
        </if>
        -->
        <if test="whoisMatch">
            LEFT JOIN whoisOriginal ON ${tableName}.phone = whoisOriginal.phone
        </if>
        <if test="healthBuyersMatch">
            LEFT JOIN healthbuyersOriginal ON ${tableName}.phone = healthbuyersOriginal.phone
        </if>
        <if test="healthInsuranceMatch">
            LEFT JOIN healthinsuranceleadsOriginal ON ${tableName}.phone = healthinsuranceleadsOriginal.phone
        </if>
        <if test="instagramMatch">
            LEFT JOIN instagramOriginal ON ${tableName}.phone = instagramOriginal.phone
        </if>

        <!--
       <if test="isOpt-InMatch">
         LEFT JOIN optInOriginal ON ${tableName}.phone = optInOriginal.phone
        </if>
        -->
        <if test="isCallLeadsMatch">
            LEFT JOIN callLeadsOriginal ON ${tableName}.phone = callLeadsOriginal.phone
        </if>
        <if test="isFacebookMatch">
            LEFT JOIN facebookOriginal ON ${tableName}.phone = facebookOriginal.phone
        </if>
        <if test="isEverydataMatch">
            LEFT JOIN everydataOriginal ON ${tableName}.phone = everydataOriginal.phone
        </if>
        <if test="lists.size() > 0">
            LEFT JOIN purchasedUserListsItems puli
            ON ${tableName}.hash = puli.hash AND puli.listId IN
            <foreach item="listId" index="index" collection="lists"
                     open="(" separator="," close=")">
                #{listId}
            </foreach>
        </if>
        <if test="uploaded.size() > 0">
            LEFT JOIN uploadedListsItems uli ON ${tableName}.phone = uli.phone AND uli.listId IN
            <foreach item="listId" index="index" collection="uploaded"
                     open="(" separator="," close=")">
                #{listId}
            </foreach>
        </if>
        <if test="isLocalNumbers">
            join areacodes ac on ${tableName}.areacode = ac.code
        </if>
        WHERE ( 1 = 1
        <if test="isLocalNumbers">
            AND ac.state = ${tableName}.state
        </if>
        <if test="filterDNC">
            AND ${tableName}.dnc = false
        </if>
        <if test='isFbHispanicLName and tableName.contains("FacebookMobile")' >
            AND LOWER(${tableName}.last_name) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("Everydata")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("philDirectory")' >
            AND LOWER(SPLIT_PART(${tableName}.contact_name,' ',2)) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("HealthInsuranceLeads")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>



        <!--
        <if test='isFbHispanicLName and !tableName.contains("FacebookMobile")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        -->

        <if test="removeCorps">
            AND RowNum  <![CDATA[<]]> 10
        </if>
        <if test="confirmed">
            AND (
            split_part(${tableName}.email,'@',1) ilike concat('%',${tableName}.lastname,'%')
            OR
            split_part(${tableName}.email,'@',1) ilike concat('%',${tableName}.firstname,'%'))
        </if>

        <if test="filterEmptyPhone">
            AND ${tableName}.phone != ''
        </if>
        <if test="filterEmail">
            AND ${tableName}.email != ''
        </if>
        <if test="isFilterWebsite">
            AND ${tableName}.website != ''
        </if>
        <if test="filterBusinessEmail">
            AND ${tableName}.email1 != '' AND ${tableName}.email1 IS NOT NULL
        </if>
        <if test="orConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="orConditions"
                     open="(" separator=" OR " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" AND " close=")">
                    ${tableName}.${subItem.key} ${subItem.relationship} #{subItem.value}
                </foreach>
            </foreach>
        </if>
        ) AND ( 1 = 1
        <if test="andConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="andConditions"
                     open="(" separator=" AND " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" OR " close=")">
                    <foreach item="subSubItem" index="index" collection="subItem"
                             open="(" separator=" AND " close=")">
                        ${tableName}.${subSubItem.key} ${subSubItem.relationship} #{subSubItem.value}
                    </foreach>
                </foreach>
            </foreach>
        </if>
        )
        <if test="lists.size() > 0">
            AND puli.id IS NULL
        </if>
        <if test="uploaded.size() > 0">
            AND uli.id IS NULL
        </if>

        <if test="businessMatch2 or consumer2018Match or consumer2019Match or whoisMatch or healthBuyersMatch or healthInsuranceMatch or instagramMatch or businessMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or isCallLeadsMatch or isFacebookMatch or isEverydataMatch">
            AND (
            <if test="isBlackListMatch">
                responderOriginal.id IS NOT NULL
            </if>
            <if test="businessMatch">
                <if test="isBlackListMatch">OR</if>
                businessOriginal.id IS NOT NULL
            </if>
            <if test="instagramMatch">
                <if test="isBlackListMatch or businessMatch">OR</if>
                instagramOriginal.id IS NOT NULL
            </if>
            <if test="businessMatch2">
                <if test="instagramMatch or isBlackListMatch or businessMatch">OR</if>
                business2Original.id IS NOT NULL
            </if>
            <if test="consumer2018Match">
                <if test="instagramMatch or isBlackListMatch or businessMatch or businessMatch2">OR</if>
                consumer2018original.id IS NOT NULL
            </if>
            <if test="healthBuyersMatch">
                <if test="instagramMatch or isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match">OR</if>
                healthbuyersOriginal.id IS NOT NULL
            </if>
            <if test="healthInsuranceMatch">
                <if test="instagramMatch or isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch">OR</if>
                healthinsuranceleadsOriginal.id IS NOT NULL
            </if>
            <if test="whoisMatch">
                <if test="instagramMatch or isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                whoisOriginal.id IS NOT NULL
            </if>

            <if test="isConsumerMatch">
                <if test="instagramMatch or isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                consumersOriginal.id IS NOT NULL
            </if>
            <if test="isCraigslistMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                craigslistOriginal.id IS NOT NULL
            </if>
            <if test="isDirectoryMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                directoryOriginal.id IS NOT NULL
            </if>
            <if test="isBusinessDetailedMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                DetailedBusinessOriginal.id IS NOT NULL
            </if>
            <if test="isOptInMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                optInOriginal.id IS NOT NULL
            </if>
            <if test="isCallLeadsMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                callLeadsOriginal.id IS NOT NULL
            </if>
            <if test="isFacebookMatch">
                <if test="instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch or isCallLeadsMatch">OR</if>
                facebookOriginal.id IS NOT NULL
            </if>
            <if test="isEverydataMatch">
                <if test="isFacebookMatch or instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch or isCallLeadsMatch">OR</if>
                everydataOriginal.id IS NOT NULL
            </if>
            )
        </if>
        <if test="unique">
            group by ${tableName}.phone) AS ${tableName};
        </if>
        <if test="uniqueEmails">
            group by ${tableName}.email) AS ${tableName};
        </if>
        <if test="uniqueBusinessName">
            group by ${tableName}.COMPANY_NAME) AS ${tableName};
        </if>

    </select>

    <select id="getMatchingCount" resultType="Long">
        SELECT count(${tableName}.id) FROM ${tableName}
        WHERE ( ${tableName}.phone != ''
        <if test="orConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="orConditions"
                     open="(" separator=" OR " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" AND " close=")">
                    ${tableName}.${subItem.key} ${subItem.relationship} #{subItem.value}
                </foreach>
            </foreach>
        </if>)
    </select>

    <select id="findDetailedBusinessIndustriesByValues" resultType="DetailedBusinessIndustry">
        SELECT industry, sic FROM detailedBusinessIndustries
        WHERE sic IN
        <foreach item="value" collection="values"
                 open="(" separator=", " close=")">
            ${value}
        </foreach>
    </select>

    <update id="updatePhoneEntityDNC">
        UPDATE ${tableName} SET dnc=#{value} WHERE id IN
        <foreach item="id" index="index" collection="ids"
                 open="(" separator=", " close=")">
            #{id}
        </foreach>
    </update>

    <insert id="insertMatchedRecords">
        INSERT INTO userListsItems( listId, data, itemId, hash )
        SELECT #{listId}, #{data}, ${tableName}.id, ${tableName}.hash FROM ${tableName}
        WHERE ( ${tableName}.phone != ''
        <if test="orConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="orConditions"
                     open="(" separator=" OR " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" AND " close=")">
                    ${tableName}.${subItem.key} ${subItem.relationship} #{subItem.value}
                </foreach>
            </foreach>
        </if>)
    </insert>

    <insert id="insertDirectoryUserItems">
        INSERT INTO userListsItems( listId, data, itemId, hash )
        SELECT #{listId}, '', MAX(directoryOriginal.id), MAX(directoryOriginal.hash) FROM directoryOriginal
        WHERE directoryOriginal.company_name = #{companyName} GROUP by phone
    </insert>

    <insert id="updateListItems">
        INSERT INTO userListsItems( listId, itemId, hash )
        SELECT listId, itemId, hash FROM (
        <if test="unique">
            SELECT DISTINCT on (${tableName}.phone) ${tableName}.phone, #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash FROM ${tableName}
        </if>
        <if test="uniqueEmails">
            SELECT DISTINCT on (${tableName}.email) ${tableName}.email, #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash FROM ${tableName}
        </if>
        <if test="uniqueBusinessName">
            SELECT DISTINCT on (${tableName}.COMPANY_NAME) ${tableName}.COMPANY_NAME, #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash FROM ${tableName}
        </if>


        <if test='removeCorps and !tableName.contains("detailedBusiness")' >
            WITH CTE as (
            SELECT *
            ,Row_Number() OVER (
            PARTITION BY LOWER(${tableName}.COMPANY_NAME) ORDER BY ${tableName}.COMPANY_NAME DESC
            ) AS RowNum
            FROM ${tableName} )
            select ${tableName}.COMPANY_NAME, #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash from CTE as ${tableName}
        </if>
        <if test='removeCorps and tableName.contains("detailedBusiness")' >
            WITH CTE as (
            SELECT *
            ,Row_Number() OVER (
            PARTITION BY LOWER(${tableName}.COMPANY) ORDER BY ${tableName}.COMPANY DESC
            ) AS RowNum
            FROM ${tableName} )
            select ${tableName}.COMPANY, #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash from CTE as ${tableName}
        </if>

        <if test="!unique and !removeCorps">
            <if test="!uniqueBusinessName">
                <if test="!uniqueEmails">
                    SELECT #{listId} as listId, ${tableName}.id as itemId, ${tableName}.hash as hash FROM ${tableName}
                </if>
            </if>
        </if>
        <if test="isBlackListMatch">
            LEFT JOIN responderOriginal ON ${tableName}.phone = responderOriginal.phone
        </if>
        <if test="isConsumerMatch">
            LEFT JOIN consumersOriginal ON ${tableName}.phone = consumersOriginal.phone
        </if>
        <if test="isCraigslistMatch">
            LEFT JOIN craigslistOriginal ON ${tableName}.phone = craigslistOriginal.phone
        </if>
        <if test="isDirectoryMatch">
            LEFT JOIN directoryOriginal ON ${tableName}.phone = directoryOriginal.phone
        </if>
        <if test="isBusinessDetailedMatch">
            LEFT JOIN DetailedBusinessOriginal ON ${tableName}.phone = DetailedBusinessOriginal.phone
        </if>
        <if test="isOptInMatch">
            LEFT JOIN optInOriginal ON ${tableName}.phone = optInOriginal.phone
        </if>
        <if test="businessMatch">
            LEFT JOIN businessOriginal ON ${tableName}.phone = businessOriginal.phone
        </if>
        <if test="businessMatch2">
            LEFT JOIN business2Original ON ${tableName}.phone = business2Original.phone
        </if>

        <if test="consumer2018Match">
            LEFT JOIN businessOriginal ON ${tableName}.phone = businessOriginal.phone
        </if>
        <!--
        <if test="consumer2019Match">
            LEFT JOIN consumers2019Original ON ${tableName}.phone = consumers2019Original.phone
        </if>
        -->
        <if test="whoisMatch">
            LEFT JOIN whoisOriginal ON ${tableName}.phone = whoisOriginal.phone
        </if>
        <if test="healthBuyersMatch">
            LEFT JOIN healthbuyersOriginal ON ${tableName}.phone = healthbuyersOriginal.phone
        </if>
        <if test="healthInsuranceMatch">
            LEFT JOIN healthinsuranceleadsOriginal ON ${tableName}.phone = healthinsuranceleadsOriginal.phone
        </if>
        <if test="instagramMatch">
            LEFT JOIN instagramOriginal ON ${tableName}.phone = instagramOriginal.phone
        </if>
        <if test="isCallLeadsMatch">
            LEFT JOIN callLeadsOriginal ON ${tableName}.phone = callLeadsOriginal.phone
        </if>
        <if test="isFacebookMatch">
            LEFT JOIN facebookOriginal ON ${tableName}.phone = facebookOriginal.phone
        </if>
        <if test="isEverydataMatch">
            LEFT JOIN everydataOriginal ON ${tableName}.phone = everydataOriginal.phone
        </if>
        <if test="lists.size() > 0">
            LEFT JOIN purchasedUserListsItems puli
            ON ${tableName}.hash = puli.hash AND puli.listId IN
            <foreach item="purchasedListId" index="index" collection="lists"
                     open="(" separator="," close=")">
                #{purchasedListId}
            </foreach>
        </if>
        <if test="uploaded.size() > 0">
            LEFT JOIN uploadedListsItems uli ON ${tableName}.phone = uli.phone AND uli.listId IN
            <foreach item="uploadedListId" index="index" collection="uploaded"
                     open="(" separator="," close=")">
                #{uploadedListId}
            </foreach>
        </if>
        <if test="isLocalNumber">
            join areacodes ac on ${tableName}.areacode = ac.code
        </if>
        WHERE ( 1 = 1
        <if test="filterDNC">
            AND ${tableName}.dnc = false
        </if>
        <if test="isLocalNumber">
            AND ac.state = ${tableName}.state
        </if>
        <if test='isFbHispanicLName and tableName.contains("FacebookMobile")' >
            AND LOWER(${tableName}.last_name) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("Everydata")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("philDirectory")' >
            AND LOWER(SPLIT_PART(${tableName}.contact_name,' ',2)) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        <if test='isFbHispanicLName and tableName.contains("HealthInsuranceLeads")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>

        <!--
        <if test='isFbHispanicLName and !tableName.contains("FacebookMobile")' >
            AND LOWER(${tableName}.lastname) in (select distinct LOWER(lastname) from fb_hispanic_last_name)
        </if>
        -->
        <if test="removeCorps">
            AND RowNum  <![CDATA[<]]> 10
        </if>
        <if test="confirmed">
            AND (
            split_part(${tableName}.email,'@',1) ilike concat('%',${tableName}.lastname,'%')
            OR
            split_part(${tableName}.email,'@',1) ilike concat('%',${tableName}.firstname,'%'))
        </if>
        <if test="filterEmptyPhone">
            AND ${tableName}.phone != ''
        </if>
        <if test="filterEmail">
            AND ${tableName}.email != ''
        </if>
        <if test="filterBusinessEmail">
            AND ${tableName}.email1 != '' AND ${tableName}.email1 IS NOT NULL
        </if>
        <if test="isFilterWebsite">
            AND ${tableName}.website != ''
        </if>
        <if test="orConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="orConditions"
                     open="(" separator=" OR " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" AND " close=")">
                    ${tableName}.${subItem.key} ${subItem.relationship} #{subItem.value}
                </foreach>
            </foreach>
        </if>
        ) AND ( 1 = 1
        <if test="andConditions.size() > 0">
            AND
            <foreach item="item" index="index" collection="andConditions"
                     open="(" separator=" AND " close=")">
                <foreach item="subItem" index="index" collection="item"
                         open="(" separator=" OR " close=")">
                    <foreach item="subSubItem" index="index" collection="subItem"
                             open="(" separator=" AND " close=")">
                        ${tableName}.${subSubItem.key} ${subSubItem.relationship} #{subSubItem.value}
                    </foreach>
                </foreach>
            </foreach>
        </if>
        )
        <if test="lists.size() > 0">
            AND puli.id IS NULL
        </if>
        <if test="uploaded.size() > 0">
            AND uli.id IS NULL
        </if>

        <if test="businessMatch2 or consumer2018Match or consumer2019Match or whoisMatch or healthBuyersMatch or healthInsuranceMatch or instagramMatch or businessMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or isCallLeadsMatch or isFacebookMatch or isEverydataMatch">
            AND (
            <if test="isBlackListMatch">
                responderOriginal.id IS NOT NULL
            </if>
            <if test="businessMatch">
                <if test="isBlackListMatch">OR</if>
                businessOriginal.id IS NOT NULL
            </if>
            <if test="businessMatch2">
                <if test="isBlackListMatch or businessMatch">OR</if>
                business2Original.id IS NOT NULL
            </if>

            <if test="consumer2018Match">
                <if test="isBlackListMatch or businessMatch or businessMatch2">OR</if>
                consumer2018original.id IS NOT NULL
            </if>
            <if test="healthBuyersMatch">
                <if test="isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match">OR</if>
                healthbuyersOriginal.id IS NOT NULL
            </if>
            <if test="healthInsuranceMatch">
                <if test="isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch">OR</if>
                healthinsuranceleadsOriginal.id IS NOT NULL
            </if>
            <if test="whoisMatch">
                <if test="isBlackListMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                whoisOriginal.id IS NOT NULL
            </if>

            <if test="isConsumerMatch">
                <if test="isBlackListMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                consumersOriginal.id IS NOT NULL
            </if>
            <if test="isCraigslistMatch">
                <if test="isBlackListMatch or isConsumerMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                craigslistOriginal.id IS NOT NULL
            </if>
            <if test="isDirectoryMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                directoryOriginal.id IS NOT NULL
            </if>
            <if test="isBusinessDetailedMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                DetailedBusinessOriginal.id IS NOT NULL
            </if>
            <if test="isOptInMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                optInOriginal.id IS NOT NULL
            </if>
            <if test="isCallLeadsMatch">
                <if test="isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                callLeadsOriginal.id IS NOT NULL
            </if>
            <if test="instagramMatch">
                <if test="isCallLeadsMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch">OR</if>
                instagramOriginal.id IS NOT NULL
            </if>
            <if test="isFacebookMatch">
                <if test="isCallLeadsMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or whoisMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch or instagramMatch">OR</if>
                facebookOriginal.id IS NOT NULL
            </if>
            <if test="isEverydataMatch">
                <if test="isFacebookMatch or instagramMatch or isBlackListMatch or isConsumerMatch or isCraigslistMatch or isDirectoryMatch or isBusinessDetailedMatch or isOptInMatch or businessMatch or businessMatch2 or consumer2018Match or healthBuyersMatch or healthInsuranceMatch or isCallLeadsMatch">OR</if>
                everydataOriginal.id IS NOT NULL
            </if>
            )
        </if>

        ) query
    </insert>

    <insert id="insertConsumersRecordsWithIds">
        INSERT INTO ${archiveTableName} SELECT * FROM ${tableName} WHERE id IN
        <foreach item="id" collection="ids" separator=" , " open="(" close=")">
            #{id}
        </foreach>
    </insert>

    <select id="getConsumerListByPurchasedList" resultType="Consumer">
        SELECT ${tableName}.id, data, ADDR,APT,BUY_AUTO_PARTS,BUY_GARDENING,BUY_HOME_GARD,CC_USER,CITY,CREDIT_LINES,CREDIT_RANGE_NEW,CREDIT_RATING,DOB_DAY,DOB_MON,DOB_YR,DONR_CHARITABLE,DONR_MAIL_ORD,DONR_POL,DONR_POL_CONS,DONR_POL_LIB,DONR_RELIG,DONR_VETS,DWELL_TYP,EDUC,ETHNIC_ASSIM,ETHNIC_CODE,ETHNIC_CONF,ETHNIC_GRP,ETHNIC_HISP_CNTRY,ETHNIC_LANG,ETHNIC_RELIG,FIPS_CTY,FN,GENDER,GENS,HH_INCOME,HH_MARITAL_STAT,HH_SIZE,HOME_OWNR,HOME_OWNR_SRC,INF_HH_RANK,INT_HOB_SWEEPS,INT_TRAV_CASINO,INT_TRAV_GENL,LIFE_DIY,LIFE_HOME,LN,LOR,MI,NAME_PRE,NET_WORTH,NUM_ADULTS,NUM_KIDS,PHONE,phoneType,PRES_KIDS,PROP_TYPE,ST,TIME_ZN,VET_IN_HH,ZIP,ZIP4,AREA_CODE,COUNTY,ZIP_CODE,ST_CODE,DOB_DATE,age,dnc FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getHealthInsuranceLeadsByPurchasedList" resultType="HealthInsuranceLead">
        SELECT ${tableName}.id, data, FIRSTNAME,LASTNAME,EMAIL,ADDRESS,GENDER,IP,CITY,STATE,PHONE,DOB_DATE,ST_CODE,COUNTY,ZIP_CODE,AREA_CODE,ZIPCODE,phoneType,dnc,date FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getConsumer2ListByPurchasedList" resultType="Consumer2">
        SELECT ${tableName}.id, data,PERSONFIRSTNAME,PERSONMIDDLEINITIAL,carrier_name,PERSONLASTNAME,PRIMARYADDRESS,SECONDARYADDRESS,STATE,ST_CODE,ZIPCODE,ZIP_4,COUNTYCODE,COUNTYNAME,CITYNAME,DWELLINGTYPE,AREACODE,PHONE,PHONETYPE,DNC,ESTIMATEDINCOMECODE,HOMEOWNERPROBABILITYMODEL,LENGTHOFRESIDENCE,NUMBEROFPERSONSINLIVINGUNIT,PRESENCEOFCHILDREN,NUMBEROFCHILDREN,PERSONGENDER,PERSONDATEOFBIRTHDATE,PERSONAGE,PERSONEXACTAGE,PERSONMARITALSTATUS,INFERREDAGE,OCCUPATIONGROUP,PERSONOCCUPATION,ETHNICCODE,LANGUAGECODE,ETHNICGROUP,RELIGIONCODE,HISPANICCOUNTRYCODE,PERSONEDUCATION,BUSINESSOWNER,INFERREDHOUSEHOLDRANK,NUMBEROFADULTS,GENERATIONSINHOUSEHOLD,PRESENCEOFCREDITCARD,PRESENCEOFGOLDORPLATINUMCREDITCARD,PRESENCEOFPREMIUMCREDITCARD,CREDITRATING,INVESTMENT,INVESTMENTSTOCKSECURITIES,NETWORTH,NUMBEROFLINESOFCREDIT,CREDIT_RANGEOFNEWCREDIT,TRAVELANDENTERTAINMENTCARDHOLDER,CREDITCARDUSER,CREDITCARDNEWISSUE,INVESTING_ACTIVE,INVESTMENTSPERSONAL,INVESTMENTSREALESTATE,INVESTINGFINANCEGROUPING,INVESTMENTSFOREIGN,INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED,VALUEHUNTER,OPPORTUNITYSEEKERS,NEWSANDFINANCIAL,AUTOMOTIVEBUFF,BOOKREADER,COMPUTEROWNER,COOKINGENTHUSIAST,DO_IT_YOURSELFERS,EXERCISEENTHUSIAST,GARDENER,GOLFENTHUSIASTS,HOMEDECORATINGENTHUSIAST,OUTDOORENTHUSIAST,OUTDOORSPORTSLOVER,PHOTOGRAPHY,TRAVELER,PETS,CATS,DOGS,MAILRESPONDER,SWEEPSTAKES,RELIGIOUSMAGAZINE,MALEMERCHBUYER,FEMALEMERCHBUYER,CRAFTS_HOBBMERCHBUYER,GARDENING_FARMINGBUYER,BOOKBUYER,COLLECT_SPECIALFOODSBUYER,RELIGIOUSCONTRIBUTOR,POLITICALCONTRIBUTOR,CHARITABLE,DONATESTOENVIRONMENTALCAUSES,VETERANINHOUSEHOLD,HIGHTECHLEADER,SMOKER,MAILORDERBUYER,ONLINEPURCHASINGINDICATOR,APPARELWOMENS,YOUNGWOMENSAPPAREL,APPARELMENS,APPARELMENSBIGANDTALL,YOUNGMENSAPPAREL,APPARELCHILDRENS,HEALTHANDBEAUTY,BEAUTYCOSMETICS,JEWELRY,LUGGAGE,POLITICALCONSERVATIVECHARITABLEDONATION,POLITICALLIBERALCHARITABLEDONATION,VETERANSCHARITABLEDONATION,SINGLEPARENT,SENIORADULTINHOUSEHOLD,EQUESTRIAN,CAREERIMPROVEMENT,WORKINGWOMAN,AFRICANAMERICANPROFESSIONALS,SOHOINDICATOR,CAREER,READINGSCIENCEFICTION,READINGAUDIOBOOKS,HISTORYMILITARY,CURRENTAFFAIRSPOLITICS,SCIENCESPACE,EDUCATIONONLINE,GAMING,COMPUTINGHOMEOFFICEGENERAL,ELECTRONICSCOMPUTINGANDHOMEOFFICE,HIGHENDAPPLIANCES,INTENDTOPURCHASEHDTVSATELLITEDISH,TVCABLE,GAMESVIDEOGAMES,TVSATELLITEDISH,COMPUTERS,GAMESCOMPUTERGAMES,CONSUMERELECTRONICS,MOVIEMUSICGROUPING,ELECTRONICSCOMPUTERSGROUPING,TELECOMMUNICATIONS,ARTS,MUSICALINSTRUMENTS,COLLECTIBLESSTAMPS,COLLECTIBLESCOINS,COLLECTIBLESARTS,COLLECTIBLESANTIQUES,COLLECTIBLESSPORTSMEMORABILIA,MILITARYMEMORABILIAWEAPONRY,AUTOWORK,WOODWORKING,AVIATION,HOUSEPLANTS,HOMEANDGARDEN,HOMEIMPROVEMENTGROUPING,PHOTOGRAPHYANDVIDEOEQUIPMENT,HOMEFURNISHINGSDECORATING,HOMEIMPROVEMENT,INTENDTOPURCHASEHOMEIMPROVEMENT,FOODWINES,COOKINGGENERAL,COOKINGGOURMET,FOODSNATURAL,COOKINGFOODGROUPING,GAMINGCASINO,TRAVELGROUPING,TRAVEL,TRAVELDOMESTIC,TRAVELINTERNATIONAL,TRAVELCRUISEVACATIONS,UPSCALELIVING,CULTURALARTISTICLIVING,HIGHTECHLIVING,EXERCISEHEALTHGROUPING,EXERCISERUNNINGJOGGING,EXERCISEWALKING,EXERCISEAEROBIC,SPECTATORSPORTSTVSPORTS,SPECTATORSPORTSFOOTBALL,SPECTATORSPORTSBASEBALL,SPECTATORSPORTSBASKETBALL,SPECTATORSPORTSHOCKEY,SPECTATORSPORTSSOCCER,TENNIS,SNOWSKIING,MOTORCYCLING,NASCAR,BOATINGSAILING,SCUBADIVING,SPORTSANDLEISURE,HUNTING,FISHING,CAMPINGHIKING,HUNTINGSHOOTING,SPORTSGROUPING,OUTDOORSGROUPING,HEALTHMEDICAL,DIETINGWEIGHTLOSS,SELFIMPROVEMENT,AUTOMOTIVEAUTOPARTSANDACCESSORIES,HOMESWIMMINGPOOLINDICATOR,AIRCONDITIONING,HOMEHEATINDICATOR,HOMEPURCHASEPRICE,HOMEPURCHASEDATEYEAR,HOMEPURCHASEDATEMONTH,HOMEPURCHASEDATEDAY,HOMEPURCHASEDATE,HOMEYEARBUILT,ESTIMATEDCURRENTHOMEVALUECODE,MORTGAGEAMOUNTINTHOUSANDS,MORTGAGELENDERNAME,MORTGAGELENDERNAMEAVAILABLE,MORTGAGERATE,MORTGAGERATETYPE,MORTGAGELOANTYPE,TRANSACTIONTYPE,DEEDDATEOFREFINANCEYEAR,DEEDDATEOFREFINANCEMONTH,DEEDDATEOFREFINANCEDAY,DEEDDATEOFREFINANCE,REFINANCEAMOUNTINTHOUSANDS,REFINANCELENDERNAME,REFINANCELENDERNAMEAVAILABLE,REFINANCERATETYPE,REFINANCELOANTYPE,CENSUSMEDIANHOMEVALUE,CENSUSMEDIANHOUSEHOLDINCOME,CRA_INCOMECLASSIFICATIONCODE,PURCHASEMORTGAGEDATE,MOSTRECENTLENDERCODE,PURCHASELENDERNAME,MOSTRECENTMORTGAGEINTERESTRATE,SEWER,WATER,LOANTOVALUE,PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE,EMAILFLAG,dnc,email,website,ip,vin,make,model,year,phone2,<!--,carrier_name-->
        FROM ${tableName} JOIN
        <if test="isNotPurchased == false">
            purchasedUserListsItems purchasedUserListsItems
        </if>
        <if test="isNotPurchased">
            userListsItems purchasedUserListsItems
        </if>
        ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getConsumer3ListByPurchasedList" resultType="Consumer2">
        SELECT ${tableName}.id, data,PERSONFIRSTNAME,PERSONMIDDLEINITIAL,PERSONLASTNAME,PRIMARYADDRESS,SECONDARYADDRESS,STATE,ST_CODE,ZIPCODE,ZIP_4,COUNTYCODE,COUNTYNAME,CITYNAME,DWELLINGTYPE,AREACODE,PHONE,PHONETYPE,DNC,ESTIMATEDINCOMECODE,HOMEOWNERPROBABILITYMODEL,LENGTHOFRESIDENCE,NUMBEROFPERSONSINLIVINGUNIT,PRESENCEOFCHILDREN,NUMBEROFCHILDREN,PERSONGENDER,PERSONDATEOFBIRTHDATE,PERSONAGE,PERSONEXACTAGE,PERSONMARITALSTATUS,INFERREDAGE,OCCUPATIONGROUP,PERSONOCCUPATION,ETHNICCODE,LANGUAGECODE,ETHNICGROUP,RELIGIONCODE,HISPANICCOUNTRYCODE,PERSONEDUCATION,BUSINESSOWNER,INFERREDHOUSEHOLDRANK,NUMBEROFADULTS,GENERATIONSINHOUSEHOLD,PRESENCEOFCREDITCARD,PRESENCEOFGOLDORPLATINUMCREDITCARD,PRESENCEOFPREMIUMCREDITCARD,CREDITRATING,INVESTMENT,INVESTMENTSTOCKSECURITIES,NETWORTH,NUMBEROFLINESOFCREDIT,CREDIT_RANGEOFNEWCREDIT,TRAVELANDENTERTAINMENTCARDHOLDER,CREDITCARDUSER,CREDITCARDNEWISSUE,INVESTING_ACTIVE,INVESTMENTSPERSONAL,INVESTMENTSREALESTATE,INVESTINGFINANCEGROUPING,INVESTMENTSFOREIGN,INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED,VALUEHUNTER,OPPORTUNITYSEEKERS,NEWSANDFINANCIAL,AUTOMOTIVEBUFF,BOOKREADER,COMPUTEROWNER,COOKINGENTHUSIAST,DO_IT_YOURSELFERS,EXERCISEENTHUSIAST,GARDENER,GOLFENTHUSIASTS,HOMEDECORATINGENTHUSIAST,OUTDOORENTHUSIAST,OUTDOORSPORTSLOVER,PHOTOGRAPHY,TRAVELER,PETS,CATS,DOGS,MAILRESPONDER,SWEEPSTAKES,RELIGIOUSMAGAZINE,MALEMERCHBUYER,FEMALEMERCHBUYER,CRAFTS_HOBBMERCHBUYER,GARDENING_FARMINGBUYER,BOOKBUYER,COLLECT_SPECIALFOODSBUYER,RELIGIOUSCONTRIBUTOR,POLITICALCONTRIBUTOR,CHARITABLE,DONATESTOENVIRONMENTALCAUSES,VETERANINHOUSEHOLD,HIGHTECHLEADER,SMOKER,MAILORDERBUYER,ONLINEPURCHASINGINDICATOR,APPARELWOMENS,YOUNGWOMENSAPPAREL,APPARELMENS,APPARELMENSBIGANDTALL,YOUNGMENSAPPAREL,APPARELCHILDRENS,HEALTHANDBEAUTY,BEAUTYCOSMETICS,JEWELRY,LUGGAGE,POLITICALCONSERVATIVECHARITABLEDONATION,POLITICALLIBERALCHARITABLEDONATION,VETERANSCHARITABLEDONATION,SINGLEPARENT,SENIORADULTINHOUSEHOLD,EQUESTRIAN,CAREERIMPROVEMENT,WORKINGWOMAN,AFRICANAMERICANPROFESSIONALS,SOHOINDICATOR,CAREER,READINGSCIENCEFICTION,READINGAUDIOBOOKS,HISTORYMILITARY,CURRENTAFFAIRSPOLITICS,SCIENCESPACE,EDUCATIONONLINE,GAMING,COMPUTINGHOMEOFFICEGENERAL,ELECTRONICSCOMPUTINGANDHOMEOFFICE,HIGHENDAPPLIANCES,INTENDTOPURCHASEHDTVSATELLITEDISH,TVCABLE,GAMESVIDEOGAMES,TVSATELLITEDISH,COMPUTERS,GAMESCOMPUTERGAMES,CONSUMERELECTRONICS,MOVIEMUSICGROUPING,ELECTRONICSCOMPUTERSGROUPING,TELECOMMUNICATIONS,ARTS,MUSICALINSTRUMENTS,COLLECTIBLESSTAMPS,COLLECTIBLESCOINS,COLLECTIBLESARTS,COLLECTIBLESANTIQUES,COLLECTIBLESSPORTSMEMORABILIA,MILITARYMEMORABILIAWEAPONRY,AUTOWORK,WOODWORKING,AVIATION,HOUSEPLANTS,HOMEANDGARDEN,HOMEIMPROVEMENTGROUPING,PHOTOGRAPHYANDVIDEOEQUIPMENT,HOMEFURNISHINGSDECORATING,HOMEIMPROVEMENT,INTENDTOPURCHASEHOMEIMPROVEMENT,FOODWINES,COOKINGGENERAL,COOKINGGOURMET,FOODSNATURAL,COOKINGFOODGROUPING,GAMINGCASINO,TRAVELGROUPING,TRAVEL,TRAVELDOMESTIC,TRAVELINTERNATIONAL,TRAVELCRUISEVACATIONS,UPSCALELIVING,CULTURALARTISTICLIVING,HIGHTECHLIVING,EXERCISEHEALTHGROUPING,EXERCISERUNNINGJOGGING,EXERCISEWALKING,EXERCISEAEROBIC,SPECTATORSPORTSTVSPORTS,SPECTATORSPORTSFOOTBALL,SPECTATORSPORTSBASEBALL,SPECTATORSPORTSBASKETBALL,SPECTATORSPORTSHOCKEY,SPECTATORSPORTSSOCCER,TENNIS,SNOWSKIING,MOTORCYCLING,NASCAR,BOATINGSAILING,SCUBADIVING,SPORTSANDLEISURE,HUNTING,FISHING,CAMPINGHIKING,HUNTINGSHOOTING,SPORTSGROUPING,OUTDOORSGROUPING,HEALTHMEDICAL,DIETINGWEIGHTLOSS,SELFIMPROVEMENT,AUTOMOTIVEAUTOPARTSANDACCESSORIES,HOMESWIMMINGPOOLINDICATOR,AIRCONDITIONING,HOMEHEATINDICATOR,HOMEPURCHASEPRICE,HOMEPURCHASEDATEYEAR,HOMEPURCHASEDATEMONTH,HOMEPURCHASEDATEDAY,HOMEPURCHASEDATE,HOMEYEARBUILT,ESTIMATEDCURRENTHOMEVALUECODE,MORTGAGEAMOUNTINTHOUSANDS,MORTGAGELENDERNAME,MORTGAGELENDERNAMEAVAILABLE,MORTGAGERATE,MORTGAGERATETYPE,MORTGAGELOANTYPE,TRANSACTIONTYPE,DEEDDATEOFREFINANCEYEAR,DEEDDATEOFREFINANCEMONTH,DEEDDATEOFREFINANCEDAY,DEEDDATEOFREFINANCE,REFINANCEAMOUNTINTHOUSANDS,REFINANCELENDERNAME,REFINANCELENDERNAMEAVAILABLE,REFINANCERATETYPE,REFINANCELOANTYPE,CENSUSMEDIANHOMEVALUE,CENSUSMEDIANHOUSEHOLDINCOME,CRA_INCOMECLASSIFICATIONCODE,PURCHASEMORTGAGEDATE,MOSTRECENTLENDERCODE,PURCHASELENDERNAME,MOSTRECENTMORTGAGEINTERESTRATE,SEWER,WATER,LOANTOVALUE,PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE,EMAILFLAG,dnc,email,CHILDRENAGE00_02,CHILDRENAGE00_02MALE,CHILDRENAGE00_02FEMALE,CHILDRENAGE00_02UNKNOWN,CHILDRENAGE03_05,CHILDRENAGE03_05MALE,CHILDRENAGE03_05FEMALE,CHILDRENAGE03_05UNKNOWN,CHILDRENAGE06_10,CHILDRENAGE06_10MALE,CHILDRENAGE06_10FEMALE,CHILDRENAGE06_10UNKNOWN,CHILDRENAGE11_15,CHILDRENAGE11_15MALE,CHILDRENAGE11_15FEMALE,CHILDRENAGE11_15UNKNOWN,CHILDRENAGE16_17,CHILDRENAGE16_17MALE,CHILDRENAGE16_17FEMALE,CHILDRENAGE16_17UNKNOWN,NUMBEROFSOURCES,DPV_CODE,website,ip,vin,make,model,year,phone2<!--,carrier_name-->
        FROM ${tableName} JOIN
        <if test="isNotPurchased == false">
            purchasedUserListsItems purchasedUserListsItems
        </if>
        <if test="isNotPurchased">
            userListsItems purchasedUserListsItems
        </if>
        ON
        ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getSearchEngineListByPurchasedList" resultType="SearchEngine">
        SELECT ${tableName}.id, data, website, phone, phoneType, dnc, state, area_code
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getInstagramListByPurchasedList" resultType="Instagram">
        SELECT ${tableName}.id, data, username, fullname, email, website, phone, category,
               state, zipCode, city, street, county, phoneType, dnc, areaCode
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getInstagram2020ListByPurchasedList" resultType="Instagram2020">
        SELECT ${tableName}.id, data, username, fullname, email, website, phone, category,
        state, zipCode, city, street, county, phoneType, dnc, areaCode,publicationsCount, followersCount, subscriptionsCount, runsAds, feedAdsCount, storyAdsCount, biography
        FROM ${tableName} JOIN
        <if test="isNotPurchased == false">
            purchasedUserListsItems purchasedUserListsItems
        </if>
        <if test="isNotPurchased">
            userListsItems purchasedUserListsItems
        </if>
        ON
        ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getOptInListByPurchasedList" resultType="OptIn">
        SELECT ${tableName}.id, data, email, firstName, lastName, address, county, city, state, st_code, zip, zipCode,
               phone, phoneType, dnc, areaCode, ip, date, source, genderCode, dobDate
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getNewOptInListByPurchasedList" resultType="NewOptIn">
        SELECT ${tableName}.id,phonetype,dnc, email,firstname,lastname,address,city,state,ST_CODE,zip5,zip4,county,PHONE,ip,NXX,CellPart,Carrier,date,CLEAN_SOURCE
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getAutoListByPurchasedList" resultType="Auto">
        SELECT ${tableName}.id, data, FIRST_NAME, LAST_NAME, ADDRESS, CITY, STATE, ZIP_CODE, VIN, YEAR, MAKE, MODEL, PHONE,
            date, ST_CODE, areaCode, dnc, phoneType
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getBlackListByPurchasedList" resultType="Blacklist">
        SELECT ${tableName}.id, phone, state, ST_CODE, areaCode, dnc, phoneType
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getLinkedInByPurchasedList" resultType="LinkedIn">
        SELECT ${tableName}.id, email, companyName, firstName, lastName, title, address, city, county, state, zip, phone, fax, website, ip, linkedInId, date, phoneType, ST_CODE, AREA_CODE, dnc
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getBusinessListByPurchasedList" resultType="Business">
        SELECT ${tableName}.id, data,ADDRESS,ANNUAL_SALES,CITY,COMPANY_NAME,CONTACT_NAME,COUNTY,EMPLOYEE,FAX,GENDER,INDUSTRY,LATITUDE,LONGITUDE,PHONE,phoneType,SIC_CODE,STATE,ST_CODE,TITLE,WWW,ZIP,ZIP_CODE,AREA_CODE,dnc,email1,email2,email3,email4,email5,email6,email7,email8,email9,email10 FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>
    <select id="getFacebookListByPurchasedList" resultType="Facebook">
        SELECT ${tableName}.id, ${tableName}.data,first_name,last_name,city,st,status,county,job,gender,phone,phoneType,ST_CODE,AREA_CODE,dnc FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>
    <select id="getBusinessDetailedByPurchasedList" resultType="BusinessDetailed">
        SELECT ${tableName}.id, data, name,company,address,address2,city,county,phone,tollFreePhone,fax,nameFirst,middleName,nameLast,ethnicCode,ethnicGroup,languageCode,religionCode,www,totalEmployees,employeesOnSite,totalRevenue,revenue,yearFounded,minorityOwned,smallBusiness,largeBusiness,homeBusiness,importExport,publicCompany,headquartersBranch,stockExchange,franchiseFlag,individualFirmCode,SIC_CODE,appearedYear,femaleOwnedorOperated,whiteCollarCode,email,title,phoneContact,creditScore,${tableName}.SIC,STATE,ST_CODE,ZIP_CODE,AREA_CODE,ZIP,phoneType,dnc,industry
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId full join detailedbusinessindustries on ${tableName}.sic = detailedbusinessindustries.sic WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getStudentByPurchasedList" resultType="Student">
        SELECT ${tableName}.id,firstName,lastName,address,city,county,phone,state,st_code,zip,zipCode,areaCode,phoneType,dnc,email,ip,fileName,data
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getHealthBuyersByPurchasedList" resultType="HealthBuyer">
        SELECT ${tableName}.id, name, email, address, city, state, phone, ST_CODE, county, ZIP_CODE, AREA_CODE, zip, phoneType, dnc, data
        FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getDirectoryListByPurchasedList" resultType="Directory">
        SELECT ${tableName}.id, data,ADDRESS,CITY,COMPANY_NAME,COUNTY,INDUSTRY,PHONE,phoneType,STATE,ST_CODE,WWW,ZIP,ZIP_CODE,AREA_CODE,dnc,firstname,lastname,gender,ip,websites,email FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getDebtListByPurchasedList" resultType="Debt">
        SELECT ${tableName}.id, email,firstname,lastname,address,county,city,state,zip,phone,gender,date,ip,st_code,zip_code,phonetype,dnc,area_code,www FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getEverydataListByPurchasedList" resultType="Everydata">
        SELECT ${tableName}.id,email,firstname,lastname,source,dob,phone,phonetype,STATE,ST_CODE,COUNTY,CITY,dnc,AREA_CODE FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>
    <select id="getCraiglistByPurchasedList" resultType="Craigslist">
        SELECT ${tableName}.id,data,INDUSTRY,PHONE,phoneType,STATE,ST_CODE,AREA_CODE,website,date, dnc FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getWhoIsListByPurchasedList" resultType="WhoIs">
        SELECT ${tableName}.id, data, website, email, name, business, address, city, COUNTY, phone, STATE, ST_CODE, ZIP_CODE, AREA_CODE, phoneType, date, dnc FROM ${tableName} JOIN purchasedUserListsItems ON
            ${tableName}.id = purchasedUserListsItems.itemId WHERE purchasedUserListsItems.listId=#{listId}
        OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getConsumerListByNonPurchasedList" resultType="Consumer">
        SELECT ${tableName}.id, ADDR,APT,BUY_AUTO_PARTS,BUY_GARDENING,BUY_HOME_GARD,CC_USER,CITY,CREDIT_LINES,CREDIT_RANGE_NEW,CREDIT_RATING,DOB_DAY,DOB_MON,DOB_YR,DONR_CHARITABLE,DONR_MAIL_ORD,DONR_POL,DONR_POL_CONS,DONR_POL_LIB,DONR_RELIG,DONR_VETS,DWELL_TYP,EDUC,ETHNIC_ASSIM,ETHNIC_CODE,ETHNIC_CONF,ETHNIC_GRP,ETHNIC_HISP_CNTRY,ETHNIC_LANG,ETHNIC_RELIG,FIPS_CTY,FN,GENDER,GENS,HH_INCOME,HH_MARITAL_STAT,HH_SIZE,HOME_OWNR,HOME_OWNR_SRC,INF_HH_RANK,INT_HOB_SWEEPS,INT_TRAV_CASINO,INT_TRAV_GENL,LIFE_DIY,LIFE_HOME,LN,LOR,MI,NAME_PRE,NET_WORTH,NUM_ADULTS,NUM_KIDS,PHONE,phoneType,PRES_KIDS,PROP_TYPE,ST,TIME_ZN,VET_IN_HH,ZIP,ZIP4,AREA_CODE,COUNTY,ZIP_CODE,ST_CODE,DOB_DATE,age,dnc FROM ${tableName} JOIN userListsItems ON
            ${tableName}.id = userListsItems.itemId WHERE userListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getConsumer2ListByNonPurchasedList" resultType="Consumer2">
        SELECT ${tableName}.id, data,PERSONFIRSTNAME,PERSONMIDDLEINITIAL,PERSONLASTNAME,PRIMARYADDRESS,SECONDARYADDRESS,STATE,ST_CODE,ZIPCODE,ZIP_4,COUNTYCODE,COUNTYNAME,CITYNAME,DWELLINGTYPE,AREACODE,PHONE,PHONETYPE,DNC,ESTIMATEDINCOMECODE,HOMEOWNERPROBABILITYMODEL,LENGTHOFRESIDENCE,NUMBEROFPERSONSINLIVINGUNIT,PRESENCEOFCHILDREN,NUMBEROFCHILDREN,PERSONGENDER,PERSONDATEOFBIRTHDATE,PERSONAGE,PERSONEXACTAGE,PERSONMARITALSTATUS,INFERREDAGE,OCCUPATIONGROUP,PERSONOCCUPATION,ETHNICCODE,LANGUAGECODE,ETHNICGROUP,RELIGIONCODE,HISPANICCOUNTRYCODE,PERSONEDUCATION,BUSINESSOWNER,INFERREDHOUSEHOLDRANK,NUMBEROFADULTS,GENERATIONSINHOUSEHOLD,PRESENCEOFCREDITCARD,PRESENCEOFGOLDORPLATINUMCREDITCARD,PRESENCEOFPREMIUMCREDITCARD,CREDITRATING,INVESTMENT,INVESTMENTSTOCKSECURITIES,NETWORTH,NUMBEROFLINESOFCREDIT,CREDIT_RANGEOFNEWCREDIT,TRAVELANDENTERTAINMENTCARDHOLDER,CREDITCARDUSER,CREDITCARDNEWISSUE,INVESTING_ACTIVE,INVESTMENTSPERSONAL,INVESTMENTSREALESTATE,INVESTINGFINANCEGROUPING,INVESTMENTSFOREIGN,INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED,VALUEHUNTER,OPPORTUNITYSEEKERS,NEWSANDFINANCIAL,AUTOMOTIVEBUFF,BOOKREADER,COMPUTEROWNER,COOKINGENTHUSIAST,DO_IT_YOURSELFERS,EXERCISEENTHUSIAST,GARDENER,GOLFENTHUSIASTS,HOMEDECORATINGENTHUSIAST,OUTDOORENTHUSIAST,OUTDOORSPORTSLOVER,PHOTOGRAPHY,TRAVELER,PETS,CATS,DOGS,MAILRESPONDER,SWEEPSTAKES,RELIGIOUSMAGAZINE,MALEMERCHBUYER,FEMALEMERCHBUYER,CRAFTS_HOBBMERCHBUYER,GARDENING_FARMINGBUYER,BOOKBUYER,COLLECT_SPECIALFOODSBUYER,RELIGIOUSCONTRIBUTOR,POLITICALCONTRIBUTOR,CHARITABLE,DONATESTOENVIRONMENTALCAUSES,VETERANINHOUSEHOLD,HIGHTECHLEADER,SMOKER,MAILORDERBUYER,ONLINEPURCHASINGINDICATOR,APPARELWOMENS,YOUNGWOMENSAPPAREL,APPARELMENS,APPARELMENSBIGANDTALL,YOUNGMENSAPPAREL,APPARELCHILDRENS,HEALTHANDBEAUTY,BEAUTYCOSMETICS,JEWELRY,LUGGAGE,POLITICALCONSERVATIVECHARITABLEDONATION,POLITICALLIBERALCHARITABLEDONATION,VETERANSCHARITABLEDONATION,SINGLEPARENT,SENIORADULTINHOUSEHOLD,EQUESTRIAN,CAREERIMPROVEMENT,WORKINGWOMAN,AFRICANAMERICANPROFESSIONALS,SOHOINDICATOR,CAREER,READINGSCIENCEFICTION,READINGAUDIOBOOKS,HISTORYMILITARY,CURRENTAFFAIRSPOLITICS,SCIENCESPACE,EDUCATIONONLINE,GAMING,COMPUTINGHOMEOFFICEGENERAL,ELECTRONICSCOMPUTINGANDHOMEOFFICE,HIGHENDAPPLIANCES,INTENDTOPURCHASEHDTVSATELLITEDISH,TVCABLE,GAMESVIDEOGAMES,TVSATELLITEDISH,COMPUTERS,GAMESCOMPUTERGAMES,CONSUMERELECTRONICS,MOVIEMUSICGROUPING,ELECTRONICSCOMPUTERSGROUPING,TELECOMMUNICATIONS,ARTS,MUSICALINSTRUMENTS,COLLECTIBLESSTAMPS,COLLECTIBLESCOINS,COLLECTIBLESARTS,COLLECTIBLESANTIQUES,COLLECTIBLESSPORTSMEMORABILIA,MILITARYMEMORABILIAWEAPONRY,AUTOWORK,WOODWORKING,AVIATION,HOUSEPLANTS,HOMEANDGARDEN,HOMEIMPROVEMENTGROUPING,PHOTOGRAPHYANDVIDEOEQUIPMENT,HOMEFURNISHINGSDECORATING,HOMEIMPROVEMENT,INTENDTOPURCHASEHOMEIMPROVEMENT,FOODWINES,COOKINGGENERAL,COOKINGGOURMET,FOODSNATURAL,COOKINGFOODGROUPING,GAMINGCASINO,TRAVELGROUPING,TRAVEL,TRAVELDOMESTIC,TRAVELINTERNATIONAL,TRAVELCRUISEVACATIONS,UPSCALELIVING,CULTURALARTISTICLIVING,HIGHTECHLIVING,EXERCISEHEALTHGROUPING,EXERCISERUNNINGJOGGING,EXERCISEWALKING,EXERCISEAEROBIC,SPECTATORSPORTSTVSPORTS,SPECTATORSPORTSFOOTBALL,SPECTATORSPORTSBASEBALL,SPECTATORSPORTSBASKETBALL,SPECTATORSPORTSHOCKEY,SPECTATORSPORTSSOCCER,TENNIS,SNOWSKIING,MOTORCYCLING,NASCAR,BOATINGSAILING,SCUBADIVING,SPORTSANDLEISURE,HUNTING,FISHING,CAMPINGHIKING,HUNTINGSHOOTING,SPORTSGROUPING,OUTDOORSGROUPING,HEALTHMEDICAL,DIETINGWEIGHTLOSS,SELFIMPROVEMENT,AUTOMOTIVEAUTOPARTSANDACCESSORIES,HOMESWIMMINGPOOLINDICATOR,AIRCONDITIONING,HOMEHEATINDICATOR,HOMEPURCHASEPRICE,HOMEPURCHASEDATEYEAR,HOMEPURCHASEDATEMONTH,HOMEPURCHASEDATEDAY,HOMEPURCHASEDATE,HOMEYEARBUILT,ESTIMATEDCURRENTHOMEVALUECODE,MORTGAGEAMOUNTINTHOUSANDS,MORTGAGELENDERNAME,MORTGAGELENDERNAMEAVAILABLE,MORTGAGERATE,MORTGAGERATETYPE,MORTGAGELOANTYPE,TRANSACTIONTYPE,DEEDDATEOFREFINANCEYEAR,DEEDDATEOFREFINANCEMONTH,DEEDDATEOFREFINANCEDAY,DEEDDATEOFREFINANCE,REFINANCEAMOUNTINTHOUSANDS,REFINANCELENDERNAME,REFINANCELENDERNAMEAVAILABLE,REFINANCERATETYPE,REFINANCELOANTYPE,CENSUSMEDIANHOMEVALUE,CENSUSMEDIANHOUSEHOLDINCOME,CRA_INCOMECLASSIFICATIONCODE,PURCHASEMORTGAGEDATE,MOSTRECENTLENDERCODE,PURCHASELENDERNAME,MOSTRECENTMORTGAGEINTERESTRATE,SEWER,WATER,LOANTOVALUE,PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE,EMAILFLAG,dnc,email
        FROM ${tableName} JOIN userListsItems ON
            ${tableName}.id = userListsItems.itemId WHERE userListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getBusinessListByNonPurchasedList" resultType="Business">
        SELECT ${tableName}.id, ADDRESS,ANNUAL_SALES,CITY,COMPANY_NAME,CONTACT_NAME,COUNTY,EMPLOYEE,FAX,GENDER,INDUSTRY,LATITUDE,LONGITUDE,PHONE,phoneType,SIC_CODE,STATE,ST_CODE,TITLE,WWW,ZIP,ZIP_CODE,AREA_CODE,dnc FROM ${tableName} JOIN userListsItems ON
            ${tableName}.id = userListsItems.itemId WHERE userListsItems.listId=#{listId}
        ORDER BY ${tableName}.id OFFSET #{offset} LIMIT #{limit}
    </select>

    <select id="getWhoIsListByWebSites" resultType="WhoIs">
        SELECT * FROM ${tableName} WHERE website IN
        <foreach item="item" index="index" collection="items"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <delete id="bulkDeleteSearchEngineRecords">
        DELETE FROM ${name} WHERE id IN
        <foreach item="item" index="index" collection="records"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="createConsumersTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      ADDR text,
                                      APT text,
                                      BUY_AUTO_PARTS boolean,
                                      BUY_GARDENING boolean,
                                      BUY_HOME_GARD boolean,
                                      CC_USER boolean,
                                      CITY varchar(100),
                                      CREDIT_LINES integer,
                                      CREDIT_RANGE_NEW integer,
                                      CREDIT_RATING varchar(10),
                                      DOB_DAY integer,
                                      DOB_MON integer,
                                      DOB_YR integer,
                                      DONR_CHARITABLE boolean,
                                      DONR_MAIL_ORD boolean,
                                      DONR_POL boolean,
                                      DONR_POL_CONS boolean,
                                      DONR_POL_LIB boolean,
                                      DONR_RELIG boolean,
                                      DONR_VETS boolean,
                                      DWELL_TYP varchar(10),
                                      EDUC varchar(10),
                                      ETHNIC_ASSIM varchar(10),
                                      ETHNIC_CODE varchar(10),
                                      ETHNIC_CONF varchar(10),
                                      ETHNIC_GRP varchar(10),
                                      ETHNIC_HISP_CNTRY varchar(10),
                                      ETHNIC_LANG varchar(10),
                                      ETHNIC_RELIG varchar(10),
                                      FIPS_CTY varchar(100),
                                      FN varchar(100),
                                      GENDER varchar(10),
                                      GENS varchar(100),
                                      HH_INCOME varchar(100),
                                      HH_MARITAL_STAT varchar(100),
                                      HH_SIZE integer,
                                      HOME_OWNR varchar(10),
                                      HOME_OWNR_SRC varchar(100),
                                      INF_HH_RANK varchar(100),
                                      INT_HOB_SWEEPS varchar(100),
                                      INT_TRAV_CASINO boolean,
                                      INT_TRAV_GENL boolean,
                                      LIFE_DIY varchar(100),
                                      LIFE_HOME varchar(100),
                                      LN varchar(100),
                                      LOR integer,
                                      MI varchar(100),
                                      NAME_PRE varchar(100),
                                      NET_WORTH varchar(100),
                                      NUM_ADULTS integer,
                                      NUM_KIDS integer,
                                      PHONE varchar(50),
                                      AREA_CODE smallint,
                                      PRES_KIDS varchar(100),
                                      PROP_TYPE varchar(100),
                                      ST varchar(10),
                                      ST_CODE smallint,
                                      TIME_ZN varchar(100),
                                      VET_IN_HH boolean,
                                      ZIP_CODE integer,
                                      ZIP varchar(50),
                                      ZIP4 varchar(50),
                                      COUNTY varchar(100),
                                      DOB_DATE bigint,
                                      hash varchar(32),
                                      age smallint,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true
        );
    </update>

    <update id="createConsumersTableIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_dob_date_id_indx ON ${tableName}(DOB_DATE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>

    <update id="createFacebookTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      PHONE varchar(50),
                                      first_name varchar(400),
                                      last_name varchar(400),
                                      gender varchar(10),
                                      CITY varchar(400),
                                      ST varchar(22),
                                      status varchar(100),
                                      job varchar(400),
                                      AREA_CODE smallint,
                                      ST_CODE smallint,
                                      COUNTY varchar(100),
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      data text
        );
    </update>
    <update id="createFacebookTableIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>

    <update id="createHealthBuyerTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      name varchar(200),
                                      email varchar(200),
                                      address varchar(500),
                                      city varchar(200),
                                      state varchar(22),
                                      phone varchar(20),
                                      ST_CODE int,
                                      county varchar(200),
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      zip varchar(50),
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>

    <update id="createHealthInsuranceLeadTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      FIRSTNAME varchar(200),
                                      LASTNAME varchar(200),
                                      EMAIL varchar(200),
                                      ADDRESS varchar(500),
                                      GENDER varchar(1),
                                      IP varchar(50),
                                      CITY varchar(200),
                                      STATE varchar(22),
                                      PHONE varchar(20),
                                      DOB_DATE bigint,
                                      ST_CODE int,
                                      COUNTY varchar(200),
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      ZIPCODE varchar(50),
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      date bigint
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_dob_date_id_indx ON ${tableName}(DOB_DATE, id);
        CREATE INDEX ${indexName}_date_id_indx ON ${tableName}(date, id);
    </update>

    <update id="createNewOptInTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      email varchar(50),
                                      firstname varchar(100),
                                      lastname varchar(100),
                                      address varchar(100),
                                      city varchar(30),
                                      state varchar(20),
                                      ST_CODE smallint,
                                      zip5 int,
                                      zip4 int,
                                      COUNTY varchar(100),
                                      PHONE varchar(20),
                                      ip varchar(40),
                                      NXX varchar(100),
                                      CellPart varchar(100),
                                      Carrier varchar(100),
                                      date bigint,
                                      CLEAN_SOURCE varchar(100),
                                      hash varchar(35),
                                      AREA_CODE int,
                                      dnc boolean NOT NULL default true,
                                      confirmed_email boolean NOT NULL default false,
                                      phoneType smallint,
                                      data text
        )
    </update>

    <update id="createOptIn2TableIndexes">
        CREATE INDEX ${indexName}_state_id_indx ON ${tableName}(state, id);
        CREATE INDEX ${indexName}_email_id_indx ON ${tableName}(email, id);
        CREATE INDEX ${indexName}_PHONE_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_CLEAN_SOURCE_id_indx ON ${tableName}(CLEAN_SOURCE, id);
        CREATE INDEX ${indexName}_dnc_id_indx ON ${tableName}(dnc, id);
        CREATE INDEX ${indexName}_confirmed_id_email_indx ON ${tableName}(confirmed_email, id);
        CREATE INDEX ${indexName}_zip4_id_indx ON ${tableName}(zip4, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_firstname_id_indx ON ${tableName}(firstname, id);
        CREATE INDEX ${indexName}_carrier_id_indx ON ${tableName}(carrier, id);
    </update>

    <update id="createEveridataTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      email varchar(50),
                                      firstname varchar(100),
                                      lastname varchar(100),
                                      source varchar(100),
                                      city varchar(30),
                                      state varchar(20),
                                      ST_CODE smallint,
                                      COUNTY varchar(100),
                                      PHONE varchar(20),
                                      dob bigint,
                                      hash varchar(35),
                                      AREA_CODE int,
                                      dnc boolean NOT NULL default true,
                                      phoneType smallint,
                                      data text
        )
    </update>
    <update id="createEverydataTableIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_firstname_id_indx ON ${tableName}(firstname, id);
    </update>

    <update id="createBusinessTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      ADDRESS varchar(200),
                                      ANNUAL_SALES varchar(500),
                                      CITY varchar(500),
                                      COMPANY_NAME varchar(200),
                                      CONTACT_NAME varchar(200),
                                      COUNTY varchar(500),
                                      EMPLOYEE varchar(50),
                                      FAX varchar(50),
                                      GENDER varchar(50),
                                      INDUSTRY varchar(500),
                                      LATITUDE float,
                                      LONGITUDE float,
                                      PHONE varchar(20),
                                      SIC_CODE varchar(20),
                                      SIC int,
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      TITLE varchar(500),
                                      WWW varchar(500),
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      ZIP varchar(50),
                                      hash varchar(32),
                                      age smallint,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      email1 varchar(300),
                                      email2 varchar(300),
                                      email3 varchar(300),
                                      email4 varchar(300),
                                      email5 varchar(300),
                                      email6 varchar(300),
                                      email7 varchar(300),
                                      email8 varchar(300),
                                      email9 varchar(300),
                                      email10 varchar(300)
        );
    </update>

    <update id="createBusinessTableIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_sic_id_indx ON ${tableName}(sic, id);
    </update>

    <update id="createBusinessDetailedTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      name varchar(100),
                                      company varchar(200),
                                      address varchar(200),
                                      address2 varchar(100),
                                      city varchar(500),
                                      county varchar(100),
                                      phone varchar(50),
                                      tollFreePhone varchar(50),
                                      fax varchar(50),
                                      nameFirst varchar(100),
                                      middleName varchar(100),
                                      nameLast varchar(100),
                                      ethnicCode varchar(5),
                                      ethnicGroup varchar(5),
                                      languageCode varchar(5),
                                      religionCode varchar(5),
                                      www varchar(500),
                                      totalEmployees integer,
                                      employeesOnSite integer,
                                      totalRevenue integer,
                                      revenue integer,
                                      yearFounded integer,
                                      minorityOwned smallInt,
                                      smallBusiness smallInt,
                                      largeBusiness smallInt,
                                      homeBusiness smallInt,
                                      importExport smallInt,
                                      publicCompany smallInt,
                                      headquartersBranch smallInt,
                                      stockExchange smallInt,
                                      franchiseFlag smallInt,
                                      individualFirmCode integer,
                                      SIC_CODE varchar(20),
                                      appearedYear integer,
                                      femaleOwnedorOperated smallInt,
                                      whiteCollarCode smallInt,
                                      email varchar(100),
                                      title varchar(500),
                                      phoneContact varchar(50),
                                      creditScore varchar(5),
                                      SIC integer,
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      ZIP varchar(50),
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true
        );

        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_sic_id_indx ON ${tableName}(sic, id);
    </update>

    <update id="createDirectoryTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      ADDRESS varchar(200),
                                      CITY varchar(100),
                                      COMPANY_NAME varchar(200),
                                      COUNTY varchar(100),
                                      INDUSTRY varchar(400),
                                      PHONE varchar(20),
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      WWW varchar(100),
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      ZIP varchar(50),
                                      hash varchar(32),
                                      date bigint,
                                      phoneType smallint,
                                      websites varchar(400),
                                      firstname varchar(100),
                                      lastname varchar(100),
                                      gender varchar(100),
                                      ip varchar(100),
                                      dnc boolean NOT NULL default true,
                                      email varchar(100)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>
    <update id="createPhilDirectoryTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      ADDRESS varchar(200),
                                      CITY varchar(100),
                                      COMPANY_NAME varchar(200),
                                      COUNTY varchar(100),
                                      INDUSTRY varchar(400),
                                      PHONE varchar(20),
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      WWW varchar(100),
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      ZIP varchar(50),
                                      hash varchar(32),
                                      date bigint,
                                      phoneType smallint,
                                      websites varchar(400),
                                      contact_name varchar(100),
                                      dnc boolean NOT NULL default true,
                                      email varchar(100)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>
    <update id="createStudentTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      firstName varchar(100),
                                      lastName varchar(100),
                                      address varchar(200),
                                      city varchar(100),
                                      county varchar(100),
                                      phone varchar(20),
                                      state varchar(100),
                                      st_code smallint,
                                      zip varchar(50),
                                      hash varchar(32),
                                      zipCode integer,
                                      areaCode smallint,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      email varchar(100),
                                      ip varchar(50),
                                      fileName varchar(100),
                                      date bigint,
                                      source varchar(50)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(zipCode, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </update>

    <update id="createCraigslistTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      INDUSTRY varchar(100),
                                      PHONE varchar(20),
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      AREA_CODE smallint,
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      website varchar(1000),
                                      date bigint
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_industry_id_indx ON ${tableName}(INDUSTRY, id);
        CREATE INDEX ${indexName}_date_id_indx ON ${tableName}(date, id);
    </update>

    <select id="findAllDataSourcesForUser" resultType="DataSource">
        SELECT dataSources.id, dataSources.name, dataSources.visible FROM dataSources
                                                                              LEFT JOIN dataSourcesBlockedUsers ON dataSources.id=dataSourcesBlockedUsers.dataSourcesId AND
                                                                                                                   dataSourcesBlockedUsers.userId=#{userId}
                                                                              LEFT JOIN dataSourcesVisibility ON dataSources.id = dataSourcesVisibility.dataSourceId AND dataSourcesVisibility.resellerId = #{resellerId}
        WHERE (dataSources.visible=TRUE AND dataSourcesVisibility.visible IS NULL) OR dataSourcesVisibility.visible=TRUE OR (dataSourcesBlockedUsers.userId IS NOT NULL AND state != 0) ORDER BY lower(dataSources.name);
    </select>
    <select id="findAllDataBlockedDatasources" resultType="String">
        SELECT dataSources.name FROM dataSources
                                         LEFT JOIN dataSourcesBlockedUsers ON dataSources.id=dataSourcesBlockedUsers.dataSourcesId AND
                                                                              dataSourcesBlockedUsers.userId=#{userId}
        WHERE (dataSourcesBlockedUsers.state = 1) ORDER BY lower(dataSources.name);
    </select>

    <insert id="insertBlockedState">
        INSERT INTO dataSourcesBlockedUsers(dataSourcesId,userId,state) VALUES
        <foreach item="item" index="index" collection="userIds"
                 open="" separator="," close="">
            (#{id},#{item},#{state})
        </foreach>
    </insert>

    <!--
    <insert id="insertBlockedUsers">
        INSERT INTO dataSourcesBlockedUsers(dataSourcesId,userId) VALUES
        <foreach item="item" index="index" collection="userIds"
                 open="" separator="," close="">
            (#{id},#{item})
        </foreach>
    </insert>
-->
    <insert id="insertBlockedUsers">
        WITH upsert AS (
        UPDATE dataSourcesBlockedUsers SET state=#{state}
        WHERE datasourcesid=#{id} AND userid=#{userId}
            RETURNING *
        )
        INSERT INTO dataSourcesBlockedUsers (dataSourcesId,userId,state)
        SELECT #{id}, #{userId},#{state}
            WHERE NOT EXISTS (SELECT * FROM upsert)
    </insert>

    <insert id="createWhoIsTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      website varchar(100),
                                      email varchar(200),
                                      name varchar(200),
                                      business varchar(200),
                                      address varchar(200),
                                      city varchar(100),
                                      COUNTY varchar(100),
                                      phone varchar(50),
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      ZIP_CODE integer,
                                      AREA_CODE smallint,
                                      hash varchar(32),
                                      phoneType smallint,
                                      date bigint,
                                      dnc boolean NOT NULL default true
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(CITY, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
    </insert>

    <insert id="createSearchEngineTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      website varchar(1000),
                                      phone varchar(50),
                                      hash varchar(32),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      STATE varchar(22),
                                      ST_CODE smallint,
                                      ZIP_CODE integer,
                                      AREA_CODE smallint
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
    </insert>

    <insert id="createInstagramTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      username varchar(100),
                                      fullname varchar(500),
                                      email varchar(100),
                                      website varchar(1000),
                                      phone varchar(50),
                                      hash varchar(32),
                                      category varchar(500),
                                      state varchar(50),
                                      zipCode integer,
                                      city varchar(50),
                                      street varchar(500),
                                      county varchar(100),
                                      st_code integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      date bigint
        );

        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(zipCode, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <insert id="createInstagram2020Table">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      username varchar(100),
                                      fullname varchar(500),
                                      email varchar(100),
                                      website varchar(1000),
                                      phone varchar(50),
                                      hash varchar(32),
                                      category varchar(500),
                                      state varchar(50),
                                      zipCode integer,
                                      city varchar(50),
                                      street varchar(500),
                                      county varchar(100),
                                      st_code integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      date bigint,
                                      publicationsCount int,
                                      followersCount int,
                                      subscriptionsCount int,
                                      runsAds int,
                                      feedAdsCount int,
                                      storyAdsCount int,
                                      biography text
        );

        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(zipCode, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <insert id="createConsumers2Table">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      PERSONFIRSTNAME varchar(40),
                                      PERSONMIDDLEINITIAL varchar(20),
                                      PERSONLASTNAME varchar(40),
                                      PRIMARYADDRESS varchar(100),
                                      SECONDARYADDRESS varchar(20),
                                      STATE varchar(40),
                                      ST_CODE int,
                                      ZIPCODE int,
                                      ZIP_4 int,
                                      carrier_name varchar(100),
                                      COUNTYCODE int,
                                      COUNTYNAME varchar(40),
                                      CITYNAME varchar(40),
                                      DWELLINGTYPE varchar(50),
                                      AREACODE int,
                                      PHONE varchar(50),
                                      PHONETYPE smallint,
                                      DNC boolean NOT NULL default true,
                                      ESTIMATEDINCOMECODE varchar(20),
                                      HOMEOWNERPROBABILITYMODEL varchar(21),
                                      LENGTHOFRESIDENCE int,
                                      NUMBEROFPERSONSINLIVINGUNIT int,
                                      PRESENCEOFCHILDREN bool,
                                      NUMBEROFCHILDREN int,
                                      PERSONGENDER varchar(22),
                                      PERSONDATEOFBIRTHDATE bigint,
                                      PERSONAGE int,
                                      PERSONEXACTAGE int,
                                      PERSONMARITALSTATUS varchar(23),
                                      INFERREDAGE int,
                                      OCCUPATIONGROUP varchar(24),
                                      PERSONOCCUPATION varchar(4),
                                      ETHNICCODE varchar(25),
                                      LANGUAGECODE varchar(26),
                                      ETHNICGROUP varchar(27),
                                      RELIGIONCODE varchar(28),
                                      HISPANICCOUNTRYCODE varchar(29),
                                      PERSONEDUCATION varchar(30),
                                      BUSINESSOWNER varchar(31),
                                      INFERREDHOUSEHOLDRANK int,
                                      NUMBEROFADULTS int,
                                      GENERATIONSINHOUSEHOLD int,
                                      PRESENCEOFCREDITCARD bool,
                                      PRESENCEOFGOLDORPLATINUMCREDITCARD bool,
                                      PRESENCEOFPREMIUMCREDITCARD bool,
                                      CREDITRATING varchar(32),
                                      INVESTMENT bool,
                                      INVESTMENTSTOCKSECURITIES bool,
                                      NETWORTH varchar(33),
                                      NUMBEROFLINESOFCREDIT int,
                                      CREDIT_RANGEOFNEWCREDIT int,
                                      TRAVELANDENTERTAINMENTCARDHOLDER bool,
                                      CREDITCARDUSER bool,
                                      CREDITCARDNEWISSUE varchar(33),
                                      INVESTING_ACTIVE bool,
                                      INVESTMENTSPERSONAL bool,
                                      INVESTMENTSREALESTATE bool,
                                      INVESTINGFINANCEGROUPING bool,
                                      INVESTMENTSFOREIGN bool,
                                      INVESTMENTESTIMATEDRESIDENTIALPROPERTIESOWNED varchar(3),
                                      VALUEHUNTER bool,
                                      OPPORTUNITYSEEKERS bool,
                                      NEWSANDFINANCIAL bool,
                                      AUTOMOTIVEBUFF bool,
                                      BOOKREADER bool,
                                      COMPUTEROWNER bool,
                                      COOKINGENTHUSIAST bool,
                                      DO_IT_YOURSELFERS bool,
                                      EXERCISEENTHUSIAST bool,
                                      GARDENER bool,
                                      GOLFENTHUSIASTS bool,
                                      HOMEDECORATINGENTHUSIAST bool,
                                      OUTDOORENTHUSIAST bool,
                                      OUTDOORSPORTSLOVER bool,
                                      PHOTOGRAPHY bool,
                                      TRAVELER bool,
                                      PETS bool,
                                      CATS bool,
                                      DOGS bool,
                                      MAILRESPONDER bool,
                                      SWEEPSTAKES bool,
                                      RELIGIOUSMAGAZINE bool,
                                      MALEMERCHBUYER bool,
                                      FEMALEMERCHBUYER bool,
                                      CRAFTS_HOBBMERCHBUYER bool,
                                      GARDENING_FARMINGBUYER bool,
                                      BOOKBUYER bool,
                                      COLLECT_SPECIALFOODSBUYER bool,
                                      RELIGIOUSCONTRIBUTOR bool,
                                      POLITICALCONTRIBUTOR bool,
                                      CHARITABLE bool,
                                      DONATESTOENVIRONMENTALCAUSES bool,
                                      VETERANINHOUSEHOLD bool,
                                      HIGHTECHLEADER bool,
                                      SMOKER bool,
                                      MAILORDERBUYER bool,
                                      ONLINEPURCHASINGINDICATOR bool,
                                      APPARELWOMENS bool,
                                      YOUNGWOMENSAPPAREL bool,
                                      APPARELMENS bool,
                                      APPARELMENSBIGANDTALL bool,
                                      YOUNGMENSAPPAREL bool,
                                      APPARELCHILDRENS bool,
                                      HEALTHANDBEAUTY bool,
                                      BEAUTYCOSMETICS bool,
                                      JEWELRY bool,
                                      LUGGAGE bool,
                                      POLITICALCONSERVATIVECHARITABLEDONATION bool,
                                      POLITICALLIBERALCHARITABLEDONATION bool,
                                      VETERANSCHARITABLEDONATION bool,
                                      SINGLEPARENT bool,
                                      SENIORADULTINHOUSEHOLD bool,
                                      EQUESTRIAN bool,
                                      CAREERIMPROVEMENT bool,
                                      WORKINGWOMAN bool,
                                      AFRICANAMERICANPROFESSIONALS bool,
                                      SOHOINDICATOR bool,
                                      CAREER bool,
                                      READINGSCIENCEFICTION bool,
                                      READINGAUDIOBOOKS bool,
                                      HISTORYMILITARY bool,
                                      CURRENTAFFAIRSPOLITICS bool,
                                      SCIENCESPACE bool,
                                      EDUCATIONONLINE bool,
                                      GAMING bool,
                                      COMPUTINGHOMEOFFICEGENERAL bool,
                                      ELECTRONICSCOMPUTINGANDHOMEOFFICE bool,
                                      HIGHENDAPPLIANCES bool,
                                      INTENDTOPURCHASEHDTVSATELLITEDISH bool,
                                      TVCABLE bool,
                                      GAMESVIDEOGAMES bool,
                                      TVSATELLITEDISH bool,
                                      COMPUTERS bool,
                                      GAMESCOMPUTERGAMES bool,
                                      CONSUMERELECTRONICS bool,
                                      MOVIEMUSICGROUPING bool,
                                      ELECTRONICSCOMPUTERSGROUPING bool,
                                      TELECOMMUNICATIONS bool,
                                      ARTS bool,
                                      MUSICALINSTRUMENTS bool,
                                      COLLECTIBLESSTAMPS bool,
                                      COLLECTIBLESCOINS bool,
                                      COLLECTIBLESARTS bool,
                                      COLLECTIBLESANTIQUES bool,
                                      COLLECTIBLESSPORTSMEMORABILIA bool,
                                      MILITARYMEMORABILIAWEAPONRY bool,
                                      AUTOWORK bool,
                                      WOODWORKING bool,
                                      AVIATION bool,
                                      HOUSEPLANTS bool,
                                      HOMEANDGARDEN bool,
                                      HOMEIMPROVEMENTGROUPING bool,
                                      PHOTOGRAPHYANDVIDEOEQUIPMENT bool,
                                      HOMEFURNISHINGSDECORATING bool,
                                      HOMEIMPROVEMENT bool,
                                      INTENDTOPURCHASEHOMEIMPROVEMENT bool,
                                      FOODWINES bool,
                                      COOKINGGENERAL bool,
                                      COOKINGGOURMET bool,
                                      FOODSNATURAL bool,
                                      COOKINGFOODGROUPING bool,
                                      GAMINGCASINO bool,
                                      TRAVELGROUPING bool,
                                      TRAVEL bool,
                                      TRAVELDOMESTIC bool,
                                      TRAVELINTERNATIONAL bool,
                                      TRAVELCRUISEVACATIONS bool,
                                      UPSCALELIVING bool,
                                      CULTURALARTISTICLIVING bool,
                                      HIGHTECHLIVING bool,
                                      EXERCISEHEALTHGROUPING bool,
                                      EXERCISERUNNINGJOGGING bool,
                                      EXERCISEWALKING bool,
                                      EXERCISEAEROBIC bool,
                                      SPECTATORSPORTSTVSPORTS bool,
                                      SPECTATORSPORTSFOOTBALL bool,
                                      SPECTATORSPORTSBASEBALL bool,
                                      SPECTATORSPORTSBASKETBALL bool,
                                      SPECTATORSPORTSHOCKEY bool,
                                      SPECTATORSPORTSSOCCER bool,
                                      TENNIS bool,
                                      SNOWSKIING bool,
                                      MOTORCYCLING bool,
                                      NASCAR bool,
                                      BOATINGSAILING bool,
                                      SCUBADIVING bool,
                                      SPORTSANDLEISURE bool,
                                      HUNTING bool,
                                      FISHING bool,
                                      CAMPINGHIKING bool,
                                      HUNTINGSHOOTING bool,
                                      SPORTSGROUPING bool,
                                      OUTDOORSGROUPING bool,
                                      HEALTHMEDICAL bool,
                                      DIETINGWEIGHTLOSS bool,
                                      SELFIMPROVEMENT bool,
                                      AUTOMOTIVEAUTOPARTSANDACCESSORIES bool,
                                      HOMESWIMMINGPOOLINDICATOR bool,
                                      AIRCONDITIONING varchar(1),
                                      HOMEHEATINDICATOR varchar(1),
                                      HOMEPURCHASEPRICE int,
                                      HOMEPURCHASEDATEYEAR int,
                                      HOMEPURCHASEDATEMONTH int,
                                      HOMEPURCHASEDATEDAY int,
                                      HOMEPURCHASEDATE bigint,
                                      HOMEYEARBUILT int,
                                      ESTIMATEDCURRENTHOMEVALUECODE varchar(12),
                                      MORTGAGEAMOUNTINTHOUSANDS int,
                                      MORTGAGELENDERNAME varchar(100),
                                      MORTGAGELENDERNAMEAVAILABLE bool,
                                      MORTGAGERATE varchar(4),
                                      MORTGAGERATETYPE varchar(13),
                                      MORTGAGELOANTYPE varchar(14),
                                      TRANSACTIONTYPE varchar(50),
                                      DEEDDATEOFREFINANCEYEAR int,
                                      DEEDDATEOFREFINANCEMONTH int,
                                      DEEDDATEOFREFINANCEDAY int,
                                      DEEDDATEOFREFINANCE bigint,
                                      REFINANCEAMOUNTINTHOUSANDS int,
                                      REFINANCELENDERNAME varchar(100),
                                      REFINANCELENDERNAMEAVAILABLE bool,
                                      REFINANCERATETYPE varchar(16),
                                      REFINANCELOANTYPE varchar(17),
                                      CENSUSMEDIANHOMEVALUE varchar(6),
                                      CENSUSMEDIANHOUSEHOLDINCOME varchar(20),
                                      CRA_INCOMECLASSIFICATIONCODE int,
                                      PURCHASEMORTGAGEDATE int,
                                      MOSTRECENTLENDERCODE varchar(3),
                                      PURCHASELENDERNAME varchar(100),
                                      MOSTRECENTMORTGAGEINTERESTRATE varchar(6),
                                      SEWER int,
                                      WATER int,
                                      LOANTOVALUE varchar(3),
                                      PASSPROSPECTORVALUEHOMEVALUEMORTGAGEFILE varchar(8),
                                      EMAILFLAG bool,
                                      EMAIL varchar(400),
                                      CHILDRENAGE00_02 varchar(1),
                                      CHILDRENAGE00_02MALE varchar(1),
                                      CHILDRENAGE00_02FEMALE varchar(1),
                                      CHILDRENAGE00_02UNKNOWN varchar(1),
                                      CHILDRENAGE03_05 varchar(1),
                                      CHILDRENAGE03_05MALE varchar(1),
                                      CHILDRENAGE03_05FEMALE varchar(1),
                                      CHILDRENAGE03_05UNKNOWN varchar(1),
                                      CHILDRENAGE06_10 varchar(1),
                                      CHILDRENAGE06_10MALE varchar(1),
                                      CHILDRENAGE06_10FEMALE varchar(1),
                                      CHILDRENAGE06_10UNKNOWN varchar(1),
                                      CHILDRENAGE11_15 varchar(1),
                                      CHILDRENAGE11_15MALE varchar(1),
                                      CHILDRENAGE11_15FEMALE varchar(1),
                                      CHILDRENAGE11_15UNKNOWN varchar(1),
                                      CHILDRENAGE16_17 varchar(1),
                                      CHILDRENAGE16_17MALE varchar(1),
                                      CHILDRENAGE16_17FEMALE varchar(1),
                                      CHILDRENAGE16_17UNKNOWN varchar(1),
                                      NUMBEROFSOURCES int,
                                      DPV_CODE varchar(1),
                                      HASH varchar(32),
                                      IP varchar(50),
                                      WEBSITE varchar(800),
                                      vin varchar(100),
                                      year smallint,
                                      make varchar(100),
                                      model varchar(100),
                                      phone2 varchar(50)
        );
    </insert>

    <insert id="createConsumers2TableIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_phone_id_indx ON ${tableName}(PHONE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
    </insert>

    <insert id="createOptInTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      email varchar(100),
                                      firstName varchar(100),
                                      lastName varchar(100),
                                      address varchar(500),
                                      county varchar(500),
                                      city varchar(100),
                                      state varchar(50),
                                      st_code integer,
                                      zip varchar(50),
                                      zipCode integer,
                                      phone varchar(50),
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      ip varchar(50),
                                      date bigint,
                                      source varchar(500),
                                      sourceCriteria varchar(100),
                                      genderCode smallInt,
                                      dobDate bigint,
                                      hash varchar(32)
        );

        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(zipCode, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>


    <insert id="createDebtTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      email varchar(100),
                                      firstname varchar(100),
                                      lastname varchar(100),
                                      address varchar(200),
                                      COUNTY varchar(100),
                                      city varchar(100),
                                      state varchar(22),
                                      zip varchar(50),
                                      phone varchar(20),
                                      gender varchar(1),
                                      www varchar(100),
                                      date bigint,
                                      ip varchar(100),
                                      ST_CODE smallint,
                                      ZIP_CODE integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      AREA_CODE smallInt,
                                      hash varchar(32)
        );

        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(ST_CODE, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(COUNTY, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(ZIP_CODE, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(AREA_CODE, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <insert id="createAutoTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      FIRST_NAME varchar(100),
                                      LAST_NAME varchar(500),
                                      VIN varchar(100),
                                      YEAR smallInt,
                                      MAKE varchar(100),
                                      MODEL varchar(100),
                                      PHONE varchar(50),
                                      STATE varchar(50),
                                      ZIP_CODE integer,
                                      CITY varchar(50),
                                      ADDRESS varchar(500),
                                      COUNTY varchar(100),
                                      ST_CODE integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      date bigint,
                                      hash varchar(32)
        );
    </insert>

    <insert id="createBlackListTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      phone varchar(50),
                                      STATE varchar(50),
                                      ST_CODE integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      hash varchar(32)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <insert id="createCallLeadsTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      phone varchar(50),
                                      STATE varchar(50),
                                      ST_CODE integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      areaCode smallInt,
                                      hash varchar(32)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <insert id="createLinkedInTable">
        CREATE TABLE ${tableName} (
                                      id serial NOT NULL CONSTRAINT ${indexName}_pr_key PRIMARY KEY,
                                      email varchar(200),
                                      companyName varchar(200),
                                      firstName varchar(200),
                                      lastName varchar(200),
                                      title varchar(200),
                                      address varchar(200),
                                      city varchar(200),
                                      county varchar(200),
                                      state varchar(50),
                                      zip varchar(50),
                                      zipCode integer,
                                      fax varchar(50),
                                      website varchar(200),
                                      ip varchar(50),
                                      linkedInId varchar(200),
                                      date bigint,
                                      phone varchar(50),
                                      ST_CODE integer,
                                      phoneType smallint,
                                      dnc boolean NOT NULL default true,
                                      AREA_CODE smallInt,
                                      hash varchar(32)
        );
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(area_code, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_zip_id_indx ON ${tableName}(zipCode, id);
    </insert>

    <insert id="createAutoIndexes">
        CREATE INDEX ${indexName}_states_id_indx ON ${tableName}(st_code, id);
        CREATE INDEX ${indexName}_county_id_indx ON ${tableName}(county, id);
        CREATE INDEX ${indexName}_city_id_indx ON ${tableName}(city, id);
        CREATE INDEX ${indexName}_zip_code_id_indx ON ${tableName}(zip_code, id);
        CREATE INDEX ${indexName}_area_code_id_indx ON ${tableName}(areaCode, id);
        CREATE INDEX ${indexName}_year_id_indx ON ${tableName}(year, id);
        CREATE INDEX ${indexName}_hash_id_indx ON ${tableName}(hash, id);
    </insert>

    <update id="updateListNonPurchasedItemsHash">
        UPDATE userListsItems SET hash = md5( phone )
            FROM ${tableName}
        WHERE userListsItems.itemId = ${tableName}.id AND
            userListsItems.listId=#{listId};
    </update>

    <update id="updateListPurchasedItemsHash">
        UPDATE purchasedUserListsItems SET hash = md5( phone )
            FROM ${tableName}
        WHERE purchasedUserListsItems.itemId = ${tableName}.id AND
            purchasedUserListsItems.listId=#{listId};
    </update>

    <select id="getMatchedConsumerBusinessData" resultType="MatchedResult">
        SELECT
            b.CONTACT_NAME as bisName, b.COMPANY_NAME as bisCompany, b.CITY as bisCity, b.STATE as bisState, b.PHONE as bisPhone, b.phoneType as bisPhoneType, b.INDUSTRY as bisIndustry, c.FN as conFirstName, c.LN as conLastName, c.CITY as conCity, c.ST as conState, c.PHONE as conPhone, c.phoneType as conPhoneType, c.ETHNIC_GRP as conEthicGroup, c.ETHNIC_ASSIM as conEthnicAssim, c.ETHNIC_CODE as conEthnicCode, c.ETHNIC_CONF as conEthnicConf, c.ETHNIC_HISP_CNTRY as conEthnicHispCntry
        FROM ${businessTableName} b JOIN ${consumersTableName} c
                                         ON c.ST_CODE = #{stateCode} AND b.ST_CODE = #{stateCode} AND upper(c.CITY) = upper(b.CITY) AND upper(b.CONTACT_NAME) = upper(concat(c.FN, ' ', c.LN))
        WHERE b.id >= #{leftId} AND b.id &lt; #{rightId}
    </select>

    <delete id="removeRecordsWithKeyWord">
        DELETE FROM ${tableName} WHERE id >= #{leftId} AND id &lt;= #{rightId} AND
        <foreach item="column" index="index" collection="columns"
                 open="(" separator="OR" close=")">
            ${column} ~* #{value}
        </foreach>
    </delete>

</mapper>